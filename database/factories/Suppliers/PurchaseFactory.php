<?php

namespace Database\Factories\Suppliers;

use App\Models\Accounts\Account;
use App\Models\Setups\Generals\Currencies\Currency;
use App\Models\Setups\Supplier;
use App\Models\Setups\Warehouse;
use App\Models\Suppliers\Purchase;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Suppliers\Purchase>
 */
class PurchaseFactory extends Factory
{
    protected $model = Purchase::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $subTotal = $this->faker->randomFloat(2, 100, 10000);
        $shippingFee = $this->faker->randomFloat(2, 0, 500);
        $customsFee = $this->faker->randomFloat(2, 0, 300);
        $otherFee = $this->faker->randomFloat(2, 0, 100);
        $taxAmount = $this->faker->randomFloat(2, 0, $subTotal * 0.15);
        $discountAmount = $this->faker->randomFloat(2, 0, $subTotal * 0.1);
        
        $finalTotal = $subTotal + $shippingFee + $customsFee + $otherFee + $taxAmount - $discountAmount;

        return [
            // 'code' will be auto-generated by the model
            'date' => $this->faker->dateTimeBetween('-6 months', 'now'),
            'supplier_id' => Supplier::first()?->id ?? Supplier::factory(),
            'warehouse_id' => Warehouse::first()?->id ?? Warehouse::factory(),
            'currency_id' => Currency::first()?->id ?? Currency::factory(),
            'account_id' => $this->faker->boolean(70) ? (Account::first()?->id ?? Account::factory()) : null,
            'supplier_invoice_number' => $this->faker->unique()->regexify('[A-Z]{2,3}-[0-9]{4,6}'),
            'currency_rate' => $this->faker->randomFloat(6, 0.5, 2.0),
            
            // Fees in USD
            'shipping_fee_usd' => $shippingFee,
            'customs_fee_usd' => $customsFee,
            'other_fee_usd' => $otherFee,
            'tax_usd' => $taxAmount,
            
            // Percentage fees (alternative to fixed fees)
            'shipping_fee_usd_percent' => $this->faker->randomFloat(2, 0, 15),
            'customs_fee_usd_percent' => $this->faker->randomFloat(2, 0, 10),
            'other_fee_usd_percent' => $this->faker->randomFloat(2, 0, 5),
            'tax_usd_percent' => $this->faker->randomFloat(2, 0, 15),
            
            // Totals
            'sub_total' => $subTotal,
            'sub_total_usd' => $subTotal,
            'discount_amount' => $discountAmount,
            'discount_amount_usd' => $discountAmount,
            'total' => $subTotal - $discountAmount,
            'total_usd' => $subTotal - $discountAmount,
            'final_total' => $finalTotal,
            'final_total_usd' => $finalTotal,
            
            'note' => $this->faker->optional(0.6)->sentence(),
            'created_by' => User::factory(),
            'updated_by' => function (array $attributes) {
                return $this->faker->boolean(30) ? User::factory() : $attributes['created_by'];
            },
        ];
    }

    /**
     * Generate a unique purchase code
     */
    private function generatePurchaseCode(): string
    {
        $prefix = 'PUR';
        $year = date('Y');
        $month = date('m');
        
        // Get the next sequential number
        $lastPurchase = Purchase::whereYear('created_at', $year)
            ->whereMonth('created_at', $month)
            ->orderBy('id', 'desc')
            ->first();
            
        $nextNumber = $lastPurchase ? (int)substr($lastPurchase->code, -4) + 1 : 1;
        
        return sprintf('%s-%s%s-%04d', $prefix, $year, $month, $nextNumber);
    }

    /**
     * Purchase with minimal required fields only
     */
    public function minimal(): static
    {
        return $this->state(fn (array $attributes) => [
            'shipping_fee_usd' => 0,
            'customs_fee_usd' => 0,
            'other_fee_usd' => 0,
            'tax_usd' => 0,
            'shipping_fee_usd_percent' => 0,
            'customs_fee_usd_percent' => 0,
            'other_fee_usd_percent' => 0,
            'tax_usd_percent' => 0,
            'discount_amount' => 0,
            'discount_amount_usd' => 0,
            'account_id' => null,
            'note' => null,
        ]);
    }

    /**
     * Purchase with high shipping costs
     */
    public function withHighShipping(): static
    {
        return $this->state(fn (array $attributes) => [
            'shipping_fee_usd' => $this->faker->randomFloat(2, 500, 2000),
            'shipping_fee_usd_percent' => $this->faker->randomFloat(2, 10, 25),
        ]);
    }

    /**
     * Purchase with significant discount
     */
    public function withDiscount(): static
    {
        return $this->state(function (array $attributes) {
            $discountAmount = $attributes['sub_total'] * $this->faker->randomFloat(2, 0.05, 0.25);
            return [
                'discount_amount' => $discountAmount,
                'discount_amount_usd' => $discountAmount,
                'total' => $attributes['sub_total'] - $discountAmount,
                'total_usd' => $attributes['sub_total_usd'] - $discountAmount,
            ];
        });
    }

    /**
     * Purchase in foreign currency
     */
    public function foreignCurrency(): static
    {
        return $this->state(function (array $attributes) {
            $rate = $this->faker->randomFloat(6, 0.7, 1.5);
            return [
                'currency_rate' => $rate,
                'sub_total' => $attributes['sub_total_usd'] * $rate,
                'total' => $attributes['total_usd'] * $rate,
                'final_total' => $attributes['final_total_usd'] * $rate,
            ];
        });
    }

    /**
     * Recent purchase (last 30 days)
     */
    public function recent(): static
    {
        return $this->state(fn (array $attributes) => [
            'date' => $this->faker->dateTimeBetween('-30 days', 'now'),
        ]);
    }

    /**
     * Large purchase
     */
    public function large(): static
    {
        return $this->state(function (array $attributes) {
            $subTotal = $this->faker->randomFloat(2, 50000, 200000);
            $finalTotal = $subTotal + $this->faker->randomFloat(2, 1000, 5000);
            
            return [
                'sub_total' => $subTotal,
                'sub_total_usd' => $subTotal,
                'total' => $subTotal,
                'total_usd' => $subTotal,
                'final_total' => $finalTotal,
                'final_total_usd' => $finalTotal,
            ];
        });
    }
}
