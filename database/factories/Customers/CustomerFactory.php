<?php

namespace Database\Factories\Customers;

use App\Models\Customers\Customer;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Customers\Customer>
 */
class CustomerFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = Customer::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            // Code will be auto-generated by the model
            'name' => fake()->company(),
            
            // Classification (nullable foreign keys)
            'customer_type_id' => fake()->boolean(70) ? \App\Models\Setups\Customers\CustomerType::factory() : null,
            'customer_group_id' => fake()->boolean(60) ? \App\Models\Setups\Customers\CustomerGroup::factory() : null,
            'customer_province_id' => fake()->boolean(80) ? \App\Models\Setups\Customers\CustomerProvince::factory() : null,
            'customer_zone_id' => fake()->boolean(70) ? \App\Models\Setups\Customers\CustomerZone::factory() : null,
            
            // Financial Information
            // 'opening_balance' => fake()->randomFloat(4, -50000, 50000),
            'current_balance' => fake()->randomFloat(4, -25000, 75000),
            
            // Additional Information
            'address' => fake()->boolean(80) ? fake()->address() : null,
            'city' => fake()->boolean(85) ? fake()->city() : null,
            'telephone' => fake()->boolean(60) ? fake()->phoneNumber() : null,
            'mobile' => fake()->boolean(90) ? fake()->phoneNumber() : null,
            'url' => fake()->boolean(30) ? fake()->url() : null,
            'email' => fake()->boolean(70) ? fake()->unique()->safeEmail() : null,
            'contact_name' => fake()->boolean(75) ? fake()->name() : null,
            'gps_coordinates' => fake()->boolean(20) ? 
                fake()->latitude(-90, 90) . ',' . fake()->longitude(-180, 180) : null,
            'mof_tax_number' => fake()->boolean(40) ? fake()->numerify('###########') : null,
            
            // Sales Information
            'salesperson_id' => fake()->boolean(60) ? \App\Models\Employees\Employee::factory() : null,
            'customer_payment_term_id' => fake()->boolean(70) ? \App\Models\Setups\Customers\CustomerPaymentTerm::factory() : null,
            'discount_percentage' => fake()->boolean(50) ? fake()->randomFloat(2, 0, 15) : 0,
            'credit_limit' => fake()->boolean(80) ? fake()->randomFloat(4, 5000, 500000) : null,
            
            // Other Information
            'notes' => fake()->boolean(30) ? fake()->paragraph() : null,
            
            // System Fields
            'is_active' => fake()->boolean(85), // 85% chance of being active
            'created_by' => 1,
            'updated_by' => 1,
        ];
    }

    /**
     * Indicate that the customer has a parent.
     */
    public function withParent(): static
    {
        return $this->state(fn (array $attributes) => [
            'parent_id' => Customer::factory(),
        ]);
    }

    /**
     * Indicate that the customer is a corporate customer.
     */
    public function corporate(): static
    {
        return $this->state(fn (array $attributes) => [
            'name' => fake()->company() . ' ' . fake()->companySuffix(),
            'email' => fake()->companyEmail(),
            'url' => fake()->url(),
            'contact_name' => fake()->name(),
            'credit_limit' => fake()->randomFloat(4, 50000, 1000000),
            'notes' => 'Corporate customer with extended credit terms.',
        ]);
    }

    /**
     * Indicate that the customer is an individual customer.
     */
    public function individual(): static
    {
        return $this->state(fn (array $attributes) => [
            'name' => fake()->name(),
            'email' => fake()->safeEmail(),
            'credit_limit' => fake()->randomFloat(4, 1000, 25000),
            'notes' => 'Individual customer account.',
        ]);
    }

    /**
     * Indicate that the customer has a high credit limit.
     */
    public function highCredit(): static
    {
        return $this->state(fn (array $attributes) => [
            'credit_limit' => fake()->randomFloat(4, 100000, 2000000),
            'current_balance' => fake()->randomFloat(4, 0, 50000),
        ]);
    }

    /**
     * Indicate that the customer is over their credit limit.
     */
    public function overCreditLimit(): static
    {
        return $this->state(function (array $attributes) {
            $creditLimit = fake()->randomFloat(4, 10000, 100000);
            return [
                'credit_limit' => $creditLimit,
                'current_balance' => $creditLimit + fake()->randomFloat(4, 1000, 25000),
            ];
        });
    }

    /**
     * Indicate that the customer is inactive.
     */
    public function inactive(): static
    {
        return $this->state(fn (array $attributes) => [
            'is_active' => false,
        ]);
    }

    /**
     * Indicate that the customer has complete information.
     */
    public function complete(): static
    {
        return $this->state(fn (array $attributes) => [
            'customer_type_id' => \App\Models\Setups\Customers\CustomerType::factory(),
            'customer_group_id' => \App\Models\Setups\Customers\CustomerGroup::factory(),
            'customer_province_id' => \App\Models\Setups\Customers\CustomerProvince::factory(),
            'customer_zone_id' => \App\Models\Setups\Customers\CustomerZone::factory(),
            'address' => fake()->address(),
            'city' => fake()->city(),
            'telephone' => fake()->phoneNumber(),
            'mobile' => fake()->phoneNumber(),
            'email' => fake()->unique()->safeEmail(),
            'contact_name' => fake()->name(),
            'salesperson_id' => \App\Models\Employees\Employee::factory(),
            'customer_payment_term_id' => \App\Models\Setups\Customers\CustomerPaymentTerm::factory(),
            'credit_limit' => fake()->randomFloat(4, 10000, 500000),
        ]);
    }

    /**
     * Configure the model factory.
     */
    public function configure(): static
    {
        return $this->afterCreating(function (Customer $customer) {
            // Ensure GPS coordinates are in proper format if set
            if ($customer->gps_coordinates && !preg_match('/^-?\d{1,2}\.\d{1,7},-?\d{1,3}\.\d{1,7}$/', $customer->gps_coordinates)) {
                $customer->update([
                    'gps_coordinates' => fake()->latitude(-90, 90) . ',' . fake()->longitude(-180, 180)
                ]);
            }
        });
    }
}
