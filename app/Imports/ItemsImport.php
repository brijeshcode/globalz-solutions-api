<?php

namespace App\Imports;

use App\Models\Items\Item;
use App\Models\Setups\ItemType;
use App\Models\Setups\ItemFamily;
use App\Models\Setups\ItemGroup;
use App\Models\Setups\ItemCategory;
use App\Models\Setups\ItemBrand;
use App\Models\Setups\ItemUnit;
use App\Models\Setups\ItemProfitMargin;
use App\Models\Setups\Supplier;
use App\Models\Setups\TaxCode;
use App\Models\Setting;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithValidation;
use Maatwebsite\Excel\Concerns\WithBatchInserts;
use Maatwebsite\Excel\Concerns\WithChunkReading;

class ItemsImport implements ToCollection, WithHeadingRow, WithBatchInserts, WithChunkReading
{
    protected $skipDuplicates;
    protected $updateExisting;
    protected $results = [
        'total' => 0,
        'imported' => 0,
        'updated' => 0,
        'skipped' => 0,
        'errors' => []
    ];

    public function __construct($skipDuplicates = false, $updateExisting = false)
    {
        $this->skipDuplicates = $skipDuplicates;
        $this->updateExisting = $updateExisting;
    }

    /**
     * Process each collection/chunk
     */
    public function collection(Collection $rows)
    {
        foreach ($rows as $index => $row) {
            $this->results['total']++;
            $rowNumber = $index + 2; // +2 because of header row and 0-based index

            try {
                // Validate row data
                $result = $this->validateRow($row->toArray(), $rowNumber);

                if (isset($result['error'])) {
                    $this->results['skipped']++;
                    $this->results['errors'][] = [
                        'row' => $rowNumber,
                        'error' => $result['error']
                    ];

                    // Log validation failure for debugging
                    Log::warning("Item import validation failed", [
                        'row' => $rowNumber,
                        'error' => $result['error'],
                        'data' => $row->toArray()
                    ]);

                    continue;
                }

                $validatedData = $result['data'];

                // Check for duplicates by code or barcode
                $existingItem = null;
                if (!empty($validatedData['code'])) {
                    $existingItem = Item::withTrashed()->where('code', $validatedData['code'])->first();
                }

                if (!$existingItem && !empty($validatedData['barcode'])) {
                    $existingItem = Item::withTrashed()->where('barcode', $validatedData['barcode'])->first();
                }

                // Handle duplicate logic
                if ($existingItem) {
                    if ($this->updateExisting) {
                        // Update existing item
                        // Don't update code as it's system generated
                        $updateData = $validatedData;
                        unset($updateData['code']);
                        $existingItem->update($updateData);
                        $this->results['updated']++;
                    } else {
                        // Skip duplicate
                        $this->results['skipped']++;
                        $code = $validatedData['code'] ?? 'auto-generated';
                        $barcode = $validatedData['barcode'] ?? 'N/A';
                        $this->results['errors'][] = [
                            'row' => $rowNumber,
                            'error' => "Item already exists with code: {$code} or barcode: {$barcode}"
                        ];
                    }
                } else {
                    // Create new item
                    // If code is not provided, it will be auto-generated by the model
                    if (empty($validatedData['code'])) {
                        unset($validatedData['code']);
                    }

                    $item = Item::create($validatedData);
                    $this->results['imported']++;

                    // Initialize inventory if starting_quantity is provided
                    if (isset($validatedData['starting_quantity']) && $validatedData['starting_quantity'] > 0) {
                        $this->initializeInventory($item, $validatedData['starting_quantity']);
                    }

                    // Initialize supplier item price if base_cost and supplier_id are provided
                    if (isset($validatedData['base_cost']) && $validatedData['base_cost'] > 0 && isset($validatedData['supplier_id'])) {
                        $this->initializeSupplierItemPrice($item, $validatedData['supplier_id']);
                    }
                }

            } catch (\Exception $e) {
                $this->results['skipped']++;
                $this->results['errors'][] = [
                    'row' => $rowNumber,
                    'error' => $e->getMessage()
                ];
                Log::error("Row {$rowNumber} processing failed", [
                    'error' => $e->getMessage(),
                    'file' => $e->getFile(),
                    'line' => $e->getLine()
                ]);
            }
        }
    }

    /**
     * Validate and transform row data
     */
    protected function validateRow(array $row, int $rowNumber): array
    {
        // Map column headers to expected fields
        $data = [
            'code' => $row['code'] ?? null,
            'short_name' => $row['short_name'] ?? $row['name'] ?? null,
            'description' => $row['description'] ?? null,
            'item_type_id' => null,
            'item_family_id' => null,
            'item_group_id' => null,
            'item_category_id' => null,
            'item_brand_id' => null,
            'item_unit_id' => null,
            'item_profit_margin_id' => null,
            'supplier_id' => null,
            'tax_code_id' => null,
            'volume' => $row['volume'] ?? null,
            'weight' => $row['weight'] ?? null,
            'barcode' => $row['barcode'] ?? null,
            'base_cost' => $row['base_cost'] ?? $row['cost'] ?? 0,
            'base_sell' => $row['base_sell'] ?? $row['price'] ?? $row['sell_price'] ?? 0,
            'starting_price' => $row['starting_price'] ?? $row['base_sell'] ?? $row['price'] ?? 0,
            'starting_quantity' => $row['starting_quantity'] ?? $row['quantity'] ?? 0,
            'low_quantity_alert' => $row['low_quantity_alert'] ?? $row['min_quantity'] ?? null,
            'cost_calculation' => $row['cost_calculation'] ?? Item::COST_WEIGHTED_AVERAGE,
            'notes' => $row['notes'] ?? $row['remarks'] ?? null,
            'is_active' => isset($row['is_active']) ? filter_var($row['is_active'], FILTER_VALIDATE_BOOLEAN) : true,
        ];

        // Required field validation

        if (empty($data['description'])) {
            return ['error' => 'Item description is required'];
        }

        // Validate cost calculation method
        if (!in_array($data['cost_calculation'], Item::getCostCalculationMethods())) {
            $data['cost_calculation'] = Item::COST_WEIGHTED_AVERAGE; // Default to weighted average
        }

        // Lookup item type by name (REQUIRED)
        if (!empty($row['item_type']) || !empty($row['type'])) {
            $typeName = $row['item_type'] ?? $row['type'];
            $itemType = ItemType::where('name', $typeName)->first();
            if ($itemType) {
                $data['item_type_id'] = $itemType->id;
            } else {
                return ['error' => "Item type '{$typeName}' not found. Please ensure the item type exists in the system."];
            }
        } else {
            return ['error' => 'Item type is required'];
        }

        // Lookup item unit by name or short_name (REQUIRED)
        if (!empty($row['item_unit']) || !empty($row['unit'])) {
            $unitName = $row['item_unit'] ?? $row['unit'];
            $itemUnit = ItemUnit::where('name', $unitName)
                ->orWhere('short_name', $unitName)
                ->first();
            if ($itemUnit) {
                $data['item_unit_id'] = $itemUnit->id;
            } else {
                return ['error' => "Item unit '{$unitName}' not found. Please ensure the item unit exists in the system."];
            }
        } else {
            return ['error' => 'Item unit is required'];
        }
        
        // Lookup tax code by name (REQUIRED)
        if (!empty($row['tax_code']) || !empty($row['tax'])) {
            $taxName = $row['tax_code'] ?? $row['tax'];
            $taxCode = TaxCode::where('code', $taxName)->first();
            if ($taxCode) {
                $data['tax_code_id'] = $taxCode->id;
            } else {
                return ['error' => "Tax code '{$taxName}' not found. Please ensure the tax code exists in the system."];
            }
        } else {
            return ['error' => 'Tax code is required'];
        }

        // Lookup item family by name
        if (!empty($row['item_family']) || !empty($row['family'])) {
            $familyName = $row['item_family'] ?? $row['family'];
            $itemFamily = ItemFamily::where('name', $familyName)->first();
            if ($itemFamily) {
                $data['item_family_id'] = $itemFamily->id;
            }
        }

        // Lookup item group by name
        if (!empty($row['item_group']) || !empty($row['group'])) {
            $groupName = $row['item_group'] ?? $row['group'];
            $itemGroup = ItemGroup::where('name', $groupName)->first();
            if ($itemGroup) {
                $data['item_group_id'] = $itemGroup->id;
            }
        }

        // Lookup item category by name
        if (!empty($row['item_category']) || !empty($row['category'])) {
            $categoryName = $row['item_category'] ?? $row['category'];
            $itemCategory = ItemCategory::where('name', $categoryName)->first();
            if ($itemCategory) {
                $data['item_category_id'] = $itemCategory->id;
            }
        }

        // Lookup item brand by name
        if (!empty($row['item_brand']) || !empty($row['brand'])) {
            $brandName = $row['item_brand'] ?? $row['brand'];
            $itemBrand = ItemBrand::where('name', $brandName)->first();
            if ($itemBrand) {
                $data['item_brand_id'] = $itemBrand->id;
            }
        }

        // Lookup item profit margin by name
        if (!empty($row['item_profit_margin']) || !empty($row['profit_margin'])) {
            $profitMarginName = $row['item_profit_margin'] ?? $row['profit_margin'];
            $itemProfitMargin = ItemProfitMargin::where('name', $profitMarginName)->first();
            if ($itemProfitMargin) {
                $data['item_profit_margin_id'] = $itemProfitMargin->id;
            }
        }

        // Lookup supplier by code or name
        if (!empty($row['supplier']) || !empty($row['supplier_code'])) {
            $supplierIdentifier = $row['supplier'] ?? $row['supplier_code'];
            $supplier = Supplier::where('code', $supplierIdentifier)
                ->orWhere('name', $supplierIdentifier)
                ->first();
            if ($supplier) {
                $data['supplier_id'] = $supplier->id;
            }
        }


        // Validate numeric fields
        if (!empty($data['volume']) && !is_numeric($data['volume'])) {
            return ['error' => 'Volume must be a numeric value'];
        }

        if (!empty($data['weight']) && !is_numeric($data['weight'])) {
            return ['error' => 'Weight must be a numeric value'];
        }

        if (!is_numeric($data['base_cost'])) {
            return ['error' => 'Base cost must be a numeric value'];
        }

        if (!is_numeric($data['base_sell'])) {
            return ['error' => 'Base sell price must be a numeric value'];
        }

        if (!is_numeric($data['starting_price'])) {
            return ['error' => 'Starting price must be a numeric value'];
        }

        if (!is_numeric($data['starting_quantity'])) {
            return ['error' => 'Starting quantity must be a numeric value'];
        }

        // Clean up null values
        $data = array_filter($data, function($value) {
            return $value !== null && $value !== '';
        });

        return [
            'data' => $data
        ];
    }

    /**
     * Batch size for bulk inserts
     */
    public function batchSize(): int
    {
        return 100;
    }

    /**
     * Chunk size for reading
     */
    public function chunkSize(): int
    {
        return 100;
    }

    /**
     * Get import results
     */
    public function getResults(): array
    {
        return $this->results;
    }

    /**
     * Initialize inventory for a new item with starting quantity
     */
    private function initializeInventory(Item $item, float $startingQuantity): void
    {
        try {
            // Get default warehouse or create one if none exists
            $defaultWarehouse = \App\Models\Setups\Warehouse::where('is_default', true)->first();

            if (!$defaultWarehouse) {
                // If no default warehouse exists, get the first available warehouse
                $defaultWarehouse = \App\Models\Setups\Warehouse::first();
            }

            if ($defaultWarehouse) {
                \App\Services\Inventory\InventoryService::set(
                    $item->id,
                    $defaultWarehouse->id,
                    (int) $startingQuantity,
                    'Initial inventory from item import'
                );
            }
        } catch (\Exception $e) {
            Log::warning("Failed to initialize inventory for item {$item->code}", [
                'item_id' => $item->id,
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * Initialize supplier item price for a new item
     */
    private function initializeSupplierItemPrice(Item $item, int $supplierId): void
    {
        try {
            \App\Services\Suppliers\SupplierItemPriceService::initializeFromItem(
                $supplierId,
                $item
            );
        } catch (\Exception $e) {
            Log::warning("Failed to initialize supplier item price for item {$item->code}", [
                'item_id' => $item->id,
                'supplier_id' => $supplierId,
                'error' => $e->getMessage()
            ]);
        }
    }
}
