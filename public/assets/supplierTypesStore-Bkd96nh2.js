import{$ as e,_ as t,a1 as n,a2 as r,a3 as i,aH as a,aa as o,al as s}from"./index-BR76GLKz.js";import{b as c}from"./tableUtils-DX_RsmET.js";var l=class{baseUrl=`/setups/supplier-types`;async getSupplierTypes(t){try{let n=this.buildQueryParams(t),r=await e(`${this.baseUrl}?${n}`,{loadingMessage:`Loading supplier types...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching supplier types:`,e),e}}async getSupplierType(t){try{let n=await e(`${this.baseUrl}/${t}`,{loadingMessage:`Loading supplier type...`});return n.data.data}catch(e){throw console.error(`Error fetching supplier type:`,e),e}}async createSupplierType(e){try{let t=await r(this.baseUrl,e,{loadingMessage:`Creating supplier type...`,showSuccessNotification:!0,successMessage:`Supplier type created successfully`});return t.data.data}catch(e){throw console.error(`Error creating supplier type:`,e),e}}async updateSupplierType(e,t){try{let n=await i(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating supplier type...`,showSuccessNotification:!0,successMessage:`Supplier type updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating supplier type:`,e),e}}async deleteSupplierType(e){try{await t(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting supplier type...`,showSuccessNotification:!0,successMessage:`Supplier type deleted successfully`})}catch(e){throw console.error(`Error deleting supplier type:`,e),e}}async getTrashedSupplierTypes(t){try{let n=this.buildQueryParams(t),r=await e(`${this.baseUrl}/trashed?${n}`,{loadingMessage:`Loading trashed supplier types...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed supplier types:`,e),e}}async restoreSupplierType(e){try{let t=await n(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring supplier type...`,showSuccessNotification:!0,successMessage:`Supplier type restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring supplier type:`,e),e}}async forceDeleteSupplierType(e){try{await t(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting supplier type...`,showSuccessNotification:!0,successMessage:`Supplier type permanently deleted`})}catch(e){throw console.error(`Error permanently deleting supplier type:`,e),e}}async getSupplierTypesForSelect(){try{let t=await e(`${this.baseUrl}`,{showLoading:!1}),n=t.data.data;return n.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching supplier types for select:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const u=new l,d=o(`supplierTypes`,()=>{let e=a([]),t=a(null),n=a([]),r=a(c()),i=a(!1),o=a({}),l=s(()=>e.value.filter(e=>e.is_active)),d=s(()=>e.value.filter(e=>!e.is_active)),f=s(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),p=async t=>{try{i.value=!0,t&&(o.value={...o.value,...t});let n=await u.getSupplierTypes(o.value);e.value=n.data,r.value=n.pagination}catch(e){throw console.error(`Error fetching supplier types:`,e),e}finally{i.value=!1}},m=async e=>{try{let n=await u.getSupplierType(e);return t.value=n,n}catch(e){throw console.error(`Error fetching supplier type:`,e),e}},h=async t=>{try{let n=await u.createSupplierType(t);return e.value.unshift(n),r.value.total+=1,n}catch(e){throw console.error(`Error creating supplier type:`,e),e}},g=async(n,r)=>{try{let i=await u.updateSupplierType(n,r),a=e.value.findIndex(e=>e.id===n);return a!==-1&&(e.value[a]=i),t.value?.id===n&&(t.value=i),i}catch(e){throw console.error(`Error updating supplier type:`,e),e}},_=async n=>{try{await u.deleteSupplierType(n);let i=e.value.findIndex(e=>e.id===n);i!==-1&&e.value.splice(i,1),--r.value.total,t.value?.id===n&&(t.value=null)}catch(e){throw console.error(`Error deleting supplier type:`,e),e}},v=async e=>{try{i.value=!0;let t=e||{},r=await u.getTrashedSupplierTypes(t);n.value=r.data}catch(e){throw console.error(`Error fetching trashed supplier types:`,e),e}finally{i.value=!1}},y=async t=>{try{let i=await u.restoreSupplierType(t),a=n.value.findIndex(e=>e.id===t);return a!==-1&&n.value.splice(a,1),e.value.unshift(i),r.value.total+=1,i}catch(e){throw console.error(`Error restoring supplier type:`,e),e}},b=async e=>{try{await u.forceDeleteSupplierType(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting supplier type:`,e),e}},x=e=>{o.value={...o.value,...e}},S=()=>{o.value={}},C=()=>{t.value=null},w=()=>{e.value=[],t.value=null,n.value=[],r.value=c(),o.value={},i.value=!1},T=async()=>{try{return await u.getSupplierTypesForSelect()}catch(e){return console.error(`Error fetching supplier types for select:`,e),[]}};return{supplierTypes:e,currentSupplierType:t,trashedSupplierTypes:n,pagination:r,loading:i,filters:o,activeSupplierTypes:l,inactiveSupplierTypes:d,supplierTypesForSelect:f,fetchSupplierTypes:p,fetchSupplierType:m,createSupplierType:h,updateSupplierType:g,deleteSupplierType:_,fetchTrashedSupplierTypes:v,restoreSupplierType:y,forceDeleteSupplierType:b,updateFilters:x,clearFilters:S,clearCurrentSupplierType:C,reset:w,fetchSupplierTypesForSelect:T}});export{d as b};