import{aE as e,a_ as t,ah as n,ai as r,aj as i,ak as a,al as o,as as s}from"./index-Cc64H2XG.js";import{b as c}from"./tableUtils-BFc6-TYF.js";var l=class{baseUrl=`/setups/accounts/types`;async getAccountTypes(e){try{let t=this.buildQueryParams(e),n=await r(`${this.baseUrl}?${t}`,{loadingMessage:`Loading account types...`,showLoading:!0});return{data:n.data.data,pagination:n.data.pagination}}catch(e){throw console.error(`Error fetching account types:`,e),e}}async getAccountType(e){try{let t=await r(`${this.baseUrl}/${e}`,{loadingMessage:`Loading account type...`});return t.data.data}catch(e){throw console.error(`Error fetching accountType:`,e),e}}async createAccountType(e){try{let t=await a(this.baseUrl,e,{loadingMessage:`Creating account type...`,showSuccessNotification:!0,successMessage:`Account type created successfully`});return t.data.data}catch(e){throw console.error(`Error creating accountType:`,e),e}}async updateAccountType(e,t){try{let n=await o(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating account type...`,showSuccessNotification:!0,successMessage:`Account type updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating accountType:`,e),e}}async deleteAccountType(e){try{await n(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting account type...`,showSuccessNotification:!0,successMessage:`Account type deleted successfully`})}catch(e){throw console.error(`Error deleting accountType:`,e),e}}async getTrashedAccountTypes(e){try{let t=this.buildQueryParams(e),n=await r(`${this.baseUrl}/trashed?${t}`,{loadingMessage:`Loading trashed account types...`});return{data:n.data.data,pagination:n.data.pagination}}catch(e){throw console.error(`Error fetching trashed account types:`,e),e}}async restoreAccountType(e){try{let t=await i(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring accountType...`,showSuccessNotification:!0,successMessage:`AccountType restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring accountType:`,e),e}}async forceDeleteAccountType(e){try{await n(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting accountType...`,showSuccessNotification:!0,successMessage:`AccountType permanently deleted`})}catch(e){throw console.error(`Error permanently deleting accountType:`,e),e}}async getAccountTypesForSelect(){try{let e=await r(`${this.baseUrl}`,{showLoading:!1}),t=e.data.data;return t.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching account types for select:`,e),e}}async getAccountTypeHierarchy(){try{let e=await r(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading accountType hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching accountType hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const u=new l,d=s(`accountTypes`,()=>{let n=t([]),r=t(null),i=t([]),a=t(c()),o=t(!1),s=t({}),l=e(()=>n.value.filter(e=>e.is_active)),d=e(()=>n.value.filter(e=>!e.is_active)),f=e(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),p=async e=>{try{o.value=!0,e&&(s.value={...s.value,...e});let t=await u.getAccountTypes(s.value);n.value=t.data,a.value=t.pagination}catch(e){throw console.error(`Error fetching account types:`,e),e}finally{o.value=!1}},m=async e=>{try{let t=await u.getAccountType(e);return r.value=t,t}catch(e){throw console.error(`Error fetching account type:`,e),e}},h=async e=>{try{let t=await u.createAccountType(e);return n.value.unshift(t),a.value.total+=1,t}catch(e){throw console.error(`Error creating account type:`,e),e}},g=async(e,t)=>{try{let i=await u.updateAccountType(e,t),a=n.value.findIndex(t=>t.id===e);return a!==-1&&(n.value[a]=i),r.value?.id===e&&(r.value=i),i}catch(e){throw console.error(`Error updating account type:`,e),e}},_=async e=>{try{await u.deleteAccountType(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1),--a.value.total,r.value?.id===e&&(r.value=null)}catch(e){throw console.error(`Error deleting account type:`,e),e}},v=async e=>{try{o.value=!0;let t=e||{},n=await u.getTrashedAccountTypes(t);i.value=n.data}catch(e){throw console.error(`Error fetching trashed account types:`,e),e}finally{o.value=!1}},y=async e=>{try{let t=await u.restoreAccountType(e),r=i.value.findIndex(t=>t.id===e);return r!==-1&&i.value.splice(r,1),n.value.unshift(t),a.value.total+=1,t}catch(e){throw console.error(`Error restoring account type:`,e),e}},b=async e=>{try{await u.forceDeleteAccountType(e);let t=i.value.findIndex(t=>t.id===e);t!==-1&&i.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting account type:`,e),e}},x=e=>{s.value={...s.value,...e}},S=()=>{s.value={}},C=()=>{r.value=null},w=()=>{n.value=[],r.value=null,i.value=[],a.value=c(),s.value={},o.value=!1},T=async()=>{try{return await u.getAccountTypesForSelect()}catch(e){return console.error(`Error fetching account types for select:`,e),[]}};return{accountTypes:n,currentAccountType:r,trashedAccountTypes:i,pagination:a,loading:o,filters:s,activeAccountTypes:l,inactiveAccountTypes:d,accountTypesForSelect:f,fetchAccountTypes:p,fetchAccountType:m,createAccountType:h,updateAccountType:g,deleteAccountType:_,fetchTrashedAccountTypes:v,restoreAccountType:y,forceDeleteAccountType:b,updateFilters:x,clearFilters:S,clearCurrentAccountType:C,reset:w,fetchAccountTypesForSelect:T}});export{d as b};