import{a5 as e,a6 as t,a7 as n,a8 as r,a9 as i,aJ as a,aN as o,ae as s,af as c,ag as l,ar as u}from"./index-DdY5KyME.js";import{b as d}from"./tableUtils-BvWofAYZ.js";var f=class{baseUrl=`/customers`;async getCustomers(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}?${n}`,{loadingMessage:`Loading customers...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customers:`,e),e}}async getCustomer(e){try{let n=await t(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer...`});return n.data.data}catch(e){throw console.error(`Error fetching customer:`,e),e}}async createCustomer(e){try{let t=await r(this.baseUrl,e,{loadingMessage:`Creating customer...`,showSuccessNotification:!0,successMessage:`Customer created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customer:`,e),e}}async createCustomerWithFiles(e){try{console.log(`reach service`);let t=await r(this.baseUrl,e,{loadingMessage:`Creating customer...`,showSuccessNotification:!0,successMessage:`Customer created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customer with files:`,e),e}}async updateCustomer(e,t){try{let n=await i(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer...`,showSuccessNotification:!0,successMessage:`Customer updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer:`,e),e}}async updateCustomerWithFiles(e,t){try{let n=await r(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer...`,showSuccessNotification:!0,successMessage:`Customer updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer with files:`,e),e}}async deleteCustomer(t){try{await e(`${this.baseUrl}/${t}`,{loadingMessage:`Deleting customer...`,showSuccessNotification:!0,successMessage:`Customer deleted successfully`})}catch(e){throw console.error(`Error deleting customer:`,e),e}}async getTrashedCustomers(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}/trashed?${n}`,{loadingMessage:`Loading trashed customers...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customers:`,e),e}}async restoreCustomer(e){try{let t=await n(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customer...`,showSuccessNotification:!0,successMessage:`Customer restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customer:`,e),e}}async forceDeleteCustomer(t){try{await e(`${this.baseUrl}/${t}/force-delete`,{loadingMessage:`Permanently deleting customer...`,showSuccessNotification:!0,successMessage:`Customer permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customer:`,e),e}}async getCustomersForSelect(){try{let e=await t(`${this.baseUrl}`,{showLoading:!1});return e.data.data}catch(e){throw console.error(`Error fetching customers for select:`,e),e}}async getCustomerStats(){try{let e=await t(`${this.baseUrl}/stats`,{loadingMessage:`Loading customer statistics...`});return e.data.data}catch(e){throw console.error(`Error fetching customer statistics:`,e),e}}async exportCustomers(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}/export?${n}`,{loadingMessage:`Exporting customers...`,responseType:`blob`});return r.data}catch(e){throw console.error(`Error exporting customers:`,e),e}}async getNextCustomerCode(){try{let e=await t(`${this.baseUrl}/next-code`,{showLoading:!1});return e.data.data.code}catch(e){throw console.error(`Error fetching next customer code:`,e),e}}async getSalespersons(){try{let e=await t(`${this.baseUrl}/salespersons`,{showLoading:!1});return e.data.data}catch(e){throw console.error(`Error fetching salespersons:`,e),e}}async searchCustomers(e){try{let n=await t(`${this.baseUrl}/search?query=${encodeURIComponent(e)}`,{showLoading:!1});return n.data.data}catch(e){throw console.error(`Error searching customers:`,e),e}}async getCustomersByType(e){try{let n=await t(`${this.baseUrl}/by-type/${e}`,{loadingMessage:`Loading customers by type...`});return n.data.data}catch(e){throw console.error(`Error fetching customers by type:`,e),e}}async getCustomersByZone(e){try{let n=await t(`${this.baseUrl}/by-zone/${e}`,{loadingMessage:`Loading customers by zone...`});return n.data.data}catch(e){throw console.error(`Error fetching customers by zone:`,e),e}}async getCustomersBySalesperson(e){try{let n=await t(`${this.baseUrl}/by-salesperson/${e}`,{loadingMessage:`Loading customers by salesperson...`});return n.data.data}catch(e){throw console.error(`Error fetching customers by salesperson:`,e),e}}async updateCustomerBalance(e,t){try{let n=await r(`${this.baseUrl}/${e}/balance`,t,{loadingMessage:`Updating customer balance...`,showSuccessNotification:!0,successMessage:`Customer balance updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer balance:`,e),e}}async getCustomerBalanceHistory(e){try{let n=await t(`${this.baseUrl}/${e}/balance-history`,{loadingMessage:`Loading balance history...`});return n.data.data}catch(e){throw console.error(`Error fetching customer balance history:`,e),e}}async getCustomerChildren(e){try{let n=await t(`${this.baseUrl}/${e}/children`,{loadingMessage:`Loading customer children...`});return n.data.data}catch(e){throw console.error(`Error fetching customer children:`,e),e}}async checkCreditLimit(e){try{let n=await t(`${this.baseUrl}/${e}/credit-status`,{showLoading:!1});return n.data.data}catch(e){throw console.error(`Error checking credit limit:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const p=new f,m=l(`customers`,()=>{let e=c(),t=s(),n=o([]),r=o([]),i=o(null),l=o([]),f=o(null),m=o([]),h=o(d()),g=o(!1),_=o({is_active:!0,per_page:50}),v=u(()=>n.value.filter(e=>e.is_active)),y=u(()=>n.value.filter(e=>!e.is_active)),b=u(()=>v.value.map(e=>({value:e.id,label:e.name,disabled:!1,code:e.code,balance:e.current_balance}))),ee=u(()=>e=>n.value.filter(t=>t.customer_type_id===e)),te=u(()=>e=>n.value.filter(t=>t.customer_zone_id===e)),x=u(()=>e=>n.value.filter(t=>t.salesperson_id===e)),S=u(()=>n.value.filter(e=>e.is_over_credit_limit)),C=u(()=>n.value.filter(e=>e.current_balance!==0)),w=u(()=>{let e={};return Object.entries(t.query).forEach(([t,n])=>{n&&typeof n==`string`&&(e[t]=n)}),e}),T=async e=>{try{g.value=!0,e&&(_.value={..._.value,...e});let t=await p.getCustomers(_.value);n.value=t.data,h.value=t.pagination}catch(e){throw console.error(`Error fetching customers:`,e),e}finally{g.value=!1}},E=async e=>{try{let t=await p.getCustomer(e);return i.value=t,t}catch(e){throw console.error(`Error fetching customer:`,e),e}},D=async e=>{try{let t=await p.createCustomer(e);return n.value.unshift(t),h.value.total+=1,t}catch(e){throw console.error(`Error creating customer:`,e),e}},O=async e=>{try{console.log(`reach stored`);let t=await p.createCustomerWithFiles(e);return n.value.unshift(t),h.value.total+=1,t}catch(e){throw console.error(`Error creating customer with files:`,e),e}},k=async(e,t)=>{try{let r=await p.updateCustomer(e,t),a=n.value.findIndex(t=>t.id===e);return a!==-1&&(n.value[a]=r),i.value?.id===e&&(i.value=r),r}catch(e){throw console.error(`Error updating customer:`,e),e}},A=async(e,t)=>{try{let r=await p.updateCustomerWithFiles(e,t),a=n.value.findIndex(t=>t.id===e);return a!==-1&&(n.value[a]=r),i.value?.id===e&&(i.value=r),r}catch(e){throw console.error(`Error updating customer with files:`,e),e}},j=async e=>{try{await p.deleteCustomer(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1),--h.value.total,i.value?.id===e&&(i.value=null)}catch(e){throw console.error(`Error deleting customer:`,e),e}},M=async e=>{try{g.value=!0;let t=e||{},n=await p.getTrashedCustomers(t);l.value=n.data}catch(e){throw console.error(`Error fetching trashed customers:`,e),e}finally{g.value=!1}},N=async e=>{try{let t=await p.restoreCustomer(e),r=l.value.findIndex(t=>t.id===e);return r!==-1&&l.value.splice(r,1),n.value.unshift(t),h.value.total+=1,t}catch(e){throw console.error(`Error restoring customer:`,e),e}},P=async e=>{try{await p.forceDeleteCustomer(e);let t=l.value.findIndex(t=>t.id===e);t!==-1&&l.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer:`,e),e}},F=async()=>{try{let e=await p.getCustomerStats();return f.value=e,e}catch(e){throw console.error(`Error fetching customer statistics:`,e),e}},I=async()=>{try{let e=await p.getSalespersons();return m.value=e,e}catch(e){throw console.error(`Error fetching salespersons:`,e),e}},ne=async()=>{try{return await p.getNextCustomerCode()}catch(e){throw console.error(`Error getting next customer code:`,e),e}},L=async e=>{try{return await p.exportCustomers(e)}catch(e){throw console.error(`Error exporting customers:`,e),e}},R=async e=>{try{return await p.searchCustomers(e)}catch(e){throw console.error(`Error searching customers:`,e),e}},z=async(e,t)=>{try{let r=await p.updateCustomerBalance(e,t),a=n.value.findIndex(t=>t.id===e);return a!==-1&&(n.value[a]=r),i.value?.id===e&&(i.value=r),r}catch(e){throw console.error(`Error updating customer balance:`,e),e}},B=async e=>{try{return await p.getCustomerBalanceHistory(e)}catch(e){throw console.error(`Error fetching customer balance history:`,e),e}},V=async e=>{try{return await p.checkCreditLimit(e)}catch(e){throw console.error(`Error checking customer credit limit:`,e),e}},H=async e=>{try{return await p.getCustomerChildren(e)}catch(e){throw console.error(`Error fetching customer children:`,e),e}},U=async()=>{try{let e=await p.getCustomersForSelect();return r.value=e,e}catch(e){return console.error(`Error fetching customers for select:`,e),[]}},W=e=>{_.value={..._.value,...e}},G=()=>{_.value={}},K=()=>{i.value=null},q=e=>{let t={..._.value,search:e,page:1};_.value=t,Z(t),$(t,!1)},J=(e,t)=>{let n={..._.value,sort_by:e,sort_direction:t,page:1};_.value=n,Z(n),$(n,!1)},Y=e=>{let t={..._.value,page:e};_.value=t,Z(t),$(t,!1)},X=e=>{let t={..._.value,per_page:e,page:1};_.value=t,Z(t),$(t,!1)},Z=(n,r=!1)=>{let i={...t.query};Object.entries(n).forEach(([e,t])=>{t!=null&&t!==``?i[e]=String(t):delete i[e]});let a=r?`replace`:`push`;e[a]({query:i})},re=()=>{e.replace({query:{}})},Q=()=>{let e={is_active:!0,per_page:50};_.value={...e,...w.value}},$=async(e,t=!0)=>{t&&e&&Z(e),await T(e)},ie=()=>{n.value=[],r.value=[],i.value=null,l.value=[],f.value=null,m.value=[],h.value=d(),_.value={},g.value=!1};return a(()=>t.query,async()=>{if(Q(),t.name&&t.name.toString().includes(`customer`))try{await T(_.value)}catch(e){console.error(`Error fetching customers on URL change:`,e)}},{immediate:!1,deep:!0}),{customers:n,customersSelect:r,currentCustomer:i,trashedCustomers:l,customerStats:f,salespersons:m,pagination:h,loading:g,filters:_,activeCustomers:v,inactiveCustomers:y,customersForSelect:b,customersByType:ee,customersByZone:te,customersBySalesperson:x,customersOverCreditLimit:S,customersWithBalance:C,urlParams:w,fetchCustomers:T,fetchCustomer:E,createCustomer:D,createCustomerWithFiles:O,updateCustomer:k,updateCustomerWithFiles:A,deleteCustomer:j,fetchTrashedCustomers:M,restoreCustomer:N,forceDeleteCustomer:P,fetchCustomerStats:F,fetchSalespersons:I,getNextCustomerCode:ne,exportCustomers:L,searchCustomers:R,updateCustomerBalance:z,getCustomerBalanceHistory:B,checkCustomerCreditLimit:V,getCustomerChildren:H,fetchCustomersForSelect:U,updateFilters:W,clearFilters:G,clearCurrentCustomer:K,setSearch:q,setSort:J,setPage:Y,setPerPage:X,updateUrlParams:Z,clearUrlParams:re,syncFiltersWithUrl:Q,fetchData:$,reset:ie}});export{m as b};