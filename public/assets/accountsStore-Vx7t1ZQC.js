import{aP as e,aT as t,aa as n,ab as r,ac as i,ad as a,ae as o,aj as s,ak as c,al as l,ax as u}from"./index-DcHL1wTH.js";import{b as d}from"./tableUtils-jdfVzp2e.js";var f=class{baseUrl=`/accounts`;async getAccounts(e){try{let t=this.buildQueryParams(e),n=await r(`${this.baseUrl}?${t}`,{loadingMessage:`Loading accounts...`,showLoading:!0});return{data:n.data.data,pagination:n.data.pagination}}catch(e){throw console.error(`Error fetching accounts:`,e),e}}async getAccount(e){try{let t=await r(`${this.baseUrl}/${e}`,{loadingMessage:`Loading account...`});return t.data.data}catch(e){throw console.error(`Error fetching account:`,e),e}}async createAccount(e){try{let t=await a(this.baseUrl,e,{loadingMessage:`Creating account...`,showSuccessNotification:!0,successMessage:`Account created successfully`});return t.data.data}catch(e){throw console.error(`Error creating account:`,e),e}}async updateAccount(e,t){try{let n=await o(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating account...`,showSuccessNotification:!0,successMessage:`Account updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating account:`,e),e}}async deleteAccount(e){try{await n(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting account...`,showSuccessNotification:!0,successMessage:`Account deleted successfully`})}catch(e){throw console.error(`Error deleting account:`,e),e}}async getTrashedAccounts(e){try{let t=this.buildQueryParams(e),n=await r(`${this.baseUrl}/trashed?${t}`,{loadingMessage:`Loading trashed accounts...`});return{data:n.data.data,pagination:n.data.pagination}}catch(e){throw console.error(`Error fetching trashed accounts:`,e),e}}async restoreAccount(e){try{let t=await i(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring account...`,showSuccessNotification:!0,successMessage:`Account restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring account:`,e),e}}async forceDeleteAccount(e){try{await n(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting account...`,showSuccessNotification:!0,successMessage:`Account permanently deleted`})}catch(e){throw console.error(`Error permanently deleting account:`,e),e}}async getAccountsForSelect(){try{let e=await r(`${this.baseUrl}`,{showLoading:!1}),t=e.data.data;return t}catch(e){throw console.error(`Error fetching accounts for select:`,e),e}}async getAccountsByDepartment(e){try{let t=await r(`${this.baseUrl}/by-department/${e}`,{loadingMessage:`Loading accounts by department...`});return t.data.data}catch(e){throw console.error(`Error fetching accounts by department:`,e),e}}async searchAccounts(e){try{let t=await r(`${this.baseUrl}/search?query=${encodeURIComponent(e)}`,{showLoading:!1});return t.data.data}catch(e){throw console.error(`Error searching accounts:`,e),e}}async getAccountStats(){try{let e=await r(`${this.baseUrl}/stats`,{loadingMessage:`Loading account statistics...`});return e.data.data}catch(e){throw console.error(`Error fetching account statistics:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const p=new f,m=l(`accounts`,()=>{let n=c(),r=s(),i=t([]),a=t(null),o=t([]),l=t(null),f=t(d()),m=t(!1),h=t({is_active:!0}),g=u(()=>i.value.filter(e=>e.is_active)),_=u(()=>i.value.filter(e=>!e.is_active)),v=u(()=>g.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),y=u(()=>g.value.map(e=>({id:e.id,name:e.name,account_type:e.account_type}))),b=u(()=>e=>i.value.filter(t=>t.account_type?.id===e)),x=u(()=>e=>i.value.filter(t=>t.currency?.id===e)),S=u(()=>{let e={};return Object.entries(r.query).forEach(([t,n])=>{n&&typeof n==`string`&&(e[t]=n)}),e}),C=async e=>{try{m.value=!0,e&&(h.value={...h.value,...e});let t=await p.getAccounts(h.value);i.value=t.data,f.value=t.pagination}catch(e){throw console.error(`Error fetching accounts:`,e),e}finally{m.value=!1}},w=async e=>{try{let t=await p.getAccount(e);return a.value=t,t}catch(e){throw console.error(`Error fetching account:`,e),e}},T=async e=>{try{let t=await p.createAccount(e);return i.value.unshift(t),f.value.total+=1,t}catch(e){throw console.error(`Error creating account:`,e),e}},E=async(e,t)=>{try{let n=await p.updateAccount(e,t),r=i.value.findIndex(t=>t.id===e);return r!==-1&&(i.value[r]=n),a.value?.id===e&&(a.value=n),n}catch(e){throw console.error(`Error updating account:`,e),e}},D=async e=>{try{await p.deleteAccount(e);let t=i.value.findIndex(t=>t.id===e);t!==-1&&i.value.splice(t,1),--f.value.total,a.value?.id===e&&(a.value=null)}catch(e){throw console.error(`Error deleting account:`,e),e}},O=async e=>{try{m.value=!0;let t=e||{},n=await p.getTrashedAccounts(t);o.value=n.data}catch(e){throw console.error(`Error fetching trashed accounts:`,e),e}finally{m.value=!1}},k=async e=>{try{let t=await p.restoreAccount(e),n=o.value.findIndex(t=>t.id===e);return n!==-1&&o.value.splice(n,1),i.value.unshift(t),f.value.total+=1,t}catch(e){throw console.error(`Error restoring account:`,e),e}},A=async e=>{try{await p.forceDeleteAccount(e);let t=o.value.findIndex(t=>t.id===e);t!==-1&&o.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting account:`,e),e}},j=async()=>{try{let e=await p.getAccountStats();return l.value=e,e}catch(e){throw console.error(`Error fetching account statistics:`,e),e}},M=async e=>{try{return await p.getAccountsByDepartment(e)}catch(e){throw console.error(`Error fetching accounts by department:`,e),e}},N=async e=>{try{return await p.searchAccounts(e)}catch(e){throw console.error(`Error searching accounts:`,e),e}},P=async()=>{try{let e=await p.getAccountsForSelect();return i.value=e,e}catch(e){return console.error(`Error fetching accounts for select:`,e),[]}},F=e=>{h.value={...h.value,...e}},I=()=>{h.value={}},L=()=>{a.value=null},R=e=>{let t={...h.value,search:e,page:1};h.value=t,H(t),G(t,!1)},z=(e,t)=>{let n={...h.value,sort_by:e,sort_direction:t,page:1};h.value=n,H(n),G(n,!1)},B=e=>{let t={...h.value,page:e};h.value=t,H(t),G(t,!1)},V=e=>{let t={...h.value,per_page:e,page:1};h.value=t,H(t),G(t,!1)},H=(e,t=!1)=>{let i={...r.query};Object.entries(e).forEach(([e,t])=>{t!=null&&t!==``?i[e]=String(t):delete i[e]});let a=t?`replace`:`push`;n[a]({query:i})},U=()=>{n.replace({query:{}})},W=()=>{h.value={...S.value}},G=async(e,t=!0)=>{t&&e&&H(e),await C(e)},K=()=>{i.value=[],a.value=null,o.value=[],l.value=null,f.value=d(),h.value={},m.value=!1};return e(()=>r.query,async()=>{if(W(),r.name&&r.name.toString().includes(`account`))try{await C(h.value)}catch(e){console.error(`Error fetching accounts on URL change:`,e)}},{immediate:!1,deep:!0}),{accounts:i,currentAccount:a,trashedAccounts:o,accountStats:l,pagination:f,loading:m,filters:h,activeAccounts:g,inactiveAccounts:_,accountsForSelect:v,accountsSelect:y,accountsByType:b,accountsByCurrency:x,urlParams:S,fetchAccounts:C,fetchAccount:w,createAccount:T,updateAccount:E,deleteAccount:D,fetchTrashedAccounts:O,restoreAccount:k,forceDeleteAccount:A,fetchAccountStats:j,getAccountsByDepartment:M,searchAccounts:N,fetchAccountsForSelect:P,updateFilters:F,clearFilters:I,clearCurrentAccount:L,setSearch:R,setSort:z,setPage:B,setPerPage:V,updateUrlParams:H,clearUrlParams:U,syncFiltersWithUrl:W,fetchData:G,reset:K}});var h=m;export{h as b,m as c};