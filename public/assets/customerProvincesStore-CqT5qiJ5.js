import{a7 as e,a8 as t,a9 as n,aP as r,aa as i,ab as a,ai as o,at as s}from"./index-CgdYiaAw.js";import{b as c}from"./tableUtils-jdfVzp2e.js";var l=class{baseUrl=`/setups/customers/groups`;async getCustomerGroups(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}?${n}`,{loadingMessage:`Loading customer groups...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customer groups:`,e),e}}async getCustomerGroup(e){try{let n=await t(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer group...`});return n.data.data}catch(e){throw console.error(`Error fetching customer group:`,e),e}}async createCustomerGroup(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customer group:`,e),e}}async updateCustomerGroup(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer group:`,e),e}}async deleteCustomerGroup(t){try{await e(`${this.baseUrl}/${t}`,{loadingMessage:`Deleting customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup deleted successfully`})}catch(e){throw console.error(`Error deleting customer group:`,e),e}}async getTrashedCustomerGroups(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}/trashed?${n}`,{loadingMessage:`Loading trashed customer groups...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customer groups:`,e),e}}async restoreCustomerGroup(e){try{let t=await n(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customer group:`,e),e}}async forceDeleteCustomerGroup(t){try{await e(`${this.baseUrl}/${t}/force-delete`,{loadingMessage:`Permanently deleting customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customer group:`,e),e}}async getCustomerGroupsForSelect(){try{let e=await t(`${this.baseUrl}`,{showLoading:!1}),n=e.data.data;return n.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching customer groups for select:`,e),e}}async getCustomerGroupHierarchy(){try{let e=await t(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading customer group hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching customer group hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const u=new l,d=o(`customerGroups`,()=>{let e=r([]),t=r(null),n=r([]),i=r(c()),a=r(!1),o=r({}),l=s(()=>e.value.filter(e=>e.is_active)),d=s(()=>e.value.filter(e=>!e.is_active)),f=s(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),p=async t=>{try{a.value=!0,t&&(o.value={...o.value,...t});let n=await u.getCustomerGroups(o.value);e.value=n.data,i.value=n.pagination}catch(e){throw console.error(`Error fetching customer groups:`,e),e}finally{a.value=!1}},m=async e=>{try{let n=await u.getCustomerGroup(e);return t.value=n,n}catch(e){throw console.error(`Error fetching customer group:`,e),e}},h=async t=>{try{let n=await u.createCustomerGroup(t);return e.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error creating customer group:`,e),e}},g=async(n,r)=>{try{let i=await u.updateCustomerGroup(n,r),a=e.value.findIndex(e=>e.id===n);return a!==-1&&(e.value[a]=i),t.value?.id===n&&(t.value=i),i}catch(e){throw console.error(`Error updating customer group:`,e),e}},_=async n=>{try{await u.deleteCustomerGroup(n);let r=e.value.findIndex(e=>e.id===n);r!==-1&&e.value.splice(r,1),--i.value.total,t.value?.id===n&&(t.value=null)}catch(e){throw console.error(`Error deleting customer group:`,e),e}},v=async e=>{try{a.value=!0;let t=e||{},r=await u.getTrashedCustomerGroups(t);n.value=r.data}catch(e){throw console.error(`Error fetching trashed customer groups:`,e),e}finally{a.value=!1}},y=async t=>{try{let r=await u.restoreCustomerGroup(t),a=n.value.findIndex(e=>e.id===t);return a!==-1&&n.value.splice(a,1),e.value.unshift(r),i.value.total+=1,r}catch(e){throw console.error(`Error restoring customer group:`,e),e}},b=async e=>{try{await u.forceDeleteCustomerGroup(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer group:`,e),e}},x=e=>{o.value={...o.value,...e}},S=()=>{o.value={}},C=()=>{t.value=null},w=()=>{e.value=[],t.value=null,n.value=[],i.value=c(),o.value={},a.value=!1},T=async()=>{try{return await u.getCustomerGroupsForSelect()}catch(e){return console.error(`Error fetching customer groups for select:`,e),[]}};return{customerGroups:e,currentCustomerGroup:t,trashedCustomerGroups:n,pagination:i,loading:a,filters:o,activeCustomerGroups:l,inactiveCustomerGroups:d,customerGroupsForSelect:f,fetchCustomerGroups:p,fetchCustomerGroup:m,createCustomerGroup:h,updateCustomerGroup:g,deleteCustomerGroup:_,fetchTrashedCustomerGroups:v,restoreCustomerGroup:y,forceDeleteCustomerGroup:b,updateFilters:x,clearFilters:S,clearCurrentCustomerGroup:C,reset:w,fetchCustomerGroupsForSelect:T}});var f=d,p=class{baseUrl=`/setups/customers/provinces`;async getCustomerProvinces(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}?${n}`,{loadingMessage:`Loading Customer Provinces...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customer Provinces:`,e),e}}async getCustomerProvince(e){try{let n=await t(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer Province...`});return n.data.data}catch(e){throw console.error(`Error fetching customer province:`,e),e}}async createCustomerProvince(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating customer province...`,showSuccessNotification:!0,successMessage:`Customer province created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customer province:`,e),e}}async updateCustomerProvince(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer province...`,showSuccessNotification:!0,successMessage:`Customer province updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer province:`,e),e}}async deleteCustomerProvince(t){try{await e(`${this.baseUrl}/${t}`,{loadingMessage:`Deleting customer province...`,showSuccessNotification:!0,successMessage:`Customer province deleted successfully`})}catch(e){throw console.error(`Error deleting customer province:`,e),e}}async getTrashedCustomerProvinces(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}/trashed?${n}`,{loadingMessage:`Loading trashed customer provinces...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customer provinces:`,e),e}}async restoreCustomerProvince(e){try{let t=await n(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customer province...`,showSuccessNotification:!0,successMessage:`Customer Province restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customer province:`,e),e}}async forceDeleteCustomerProvince(t){try{await e(`${this.baseUrl}/${t}/force-delete`,{loadingMessage:`Permanently deleting customer province...`,showSuccessNotification:!0,successMessage:`Customer province permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customer province:`,e),e}}async getCustomerProvincesForSelect(){try{let e=await t(`${this.baseUrl}`,{showLoading:!1}),n=e.data.data;return n.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching customer provinces for select:`,e),e}}async getCustomerProvinceHierarchy(){try{let e=await t(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading customer province hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching customer province hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const m=new p,h=o(`customerProvinces`,()=>{let e=r([]),t=r(null),n=r([]),i=r(c()),a=r(!1),o=r({}),l=s(()=>e.value.filter(e=>e.is_active)),u=s(()=>e.value.filter(e=>!e.is_active)),d=s(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),f=async t=>{try{a.value=!0,t&&(o.value={...o.value,...t});let n=await m.getCustomerProvinces(o.value);e.value=n.data,i.value=n.pagination}catch(e){throw console.error(`Error fetching customer provinces:`,e),e}finally{a.value=!1}},p=async e=>{try{let n=await m.getCustomerProvince(e);return t.value=n,n}catch(e){throw console.error(`Error fetching customer province:`,e),e}},h=async t=>{try{let n=await m.createCustomerProvince(t);return e.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error creating customer province:`,e),e}},g=async(n,r)=>{try{let i=await m.updateCustomerProvince(n,r),a=e.value.findIndex(e=>e.id===n);return a!==-1&&(e.value[a]=i),t.value?.id===n&&(t.value=i),i}catch(e){throw console.error(`Error updating customer province:`,e),e}},_=async n=>{try{await m.deleteCustomerProvince(n);let r=e.value.findIndex(e=>e.id===n);r!==-1&&e.value.splice(r,1),--i.value.total,t.value?.id===n&&(t.value=null)}catch(e){throw console.error(`Error deleting customer province:`,e),e}},v=async e=>{try{a.value=!0;let t=e||{},r=await m.getTrashedCustomerProvinces(t);n.value=r.data}catch(e){throw console.error(`Error fetching trashed customer provinces:`,e),e}finally{a.value=!1}},y=async t=>{try{let r=await m.restoreCustomerProvince(t),a=n.value.findIndex(e=>e.id===t);return a!==-1&&n.value.splice(a,1),e.value.unshift(r),i.value.total+=1,r}catch(e){throw console.error(`Error restoring customer province:`,e),e}},b=async e=>{try{await m.forceDeleteCustomerProvince(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer province:`,e),e}},x=e=>{o.value={...o.value,...e}},S=()=>{o.value={}},C=()=>{t.value=null},w=()=>{e.value=[],t.value=null,n.value=[],i.value=c(),o.value={},a.value=!1},T=async()=>{try{return await m.getCustomerProvincesForSelect()}catch(e){return console.error(`Error fetching customer provinces for select:`,e),[]}};return{customerProvinces:e,currentCustomerProvince:t,trashedCustomerProvinces:n,pagination:i,loading:a,filters:o,activeCustomerProvinces:l,inactiveCustomerProvinces:u,customerProvincesForSelect:d,fetchCustomerProvinces:f,fetchCustomerProvince:p,createCustomerProvince:h,updateCustomerProvince:g,deleteCustomerProvince:_,fetchTrashedCustomerProvinces:v,restoreCustomerProvince:y,forceDeleteCustomerProvince:b,updateFilters:x,clearFilters:S,clearCurrentCustomerProvince:C,reset:w,fetchCustomerProvincesForSelect:T}});var g=h;export{g as b,h as c,f as d,d as e};