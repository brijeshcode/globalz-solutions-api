import{$ as e,_ as t,a1 as n,a2 as r,a3 as i,a8 as a,a9 as o,aD as s,aH as c,aa as l,al as u}from"./index-CzmzGcJs.js";import{b as d}from"./tableUtils-DX_RsmET.js";var f=class{baseUrl=`/accounts`;async getAccounts(t){try{let n=this.buildQueryParams(t),r=await e(`${this.baseUrl}?${n}`,{loadingMessage:`Loading accounts...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching accounts:`,e),e}}async getAccount(t){try{let n=await e(`${this.baseUrl}/${t}`,{loadingMessage:`Loading account...`});return n.data.data}catch(e){throw console.error(`Error fetching account:`,e),e}}async createAccount(e){try{let t=await r(this.baseUrl,e,{loadingMessage:`Creating account...`,showSuccessNotification:!0,successMessage:`Account created successfully`});return t.data.data}catch(e){throw console.error(`Error creating account:`,e),e}}async updateAccount(e,t){try{let n=await i(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating account...`,showSuccessNotification:!0,successMessage:`Account updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating account:`,e),e}}async deleteAccount(e){try{await t(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting account...`,showSuccessNotification:!0,successMessage:`Account deleted successfully`})}catch(e){throw console.error(`Error deleting account:`,e),e}}async getTrashedAccounts(t){try{let n=this.buildQueryParams(t),r=await e(`${this.baseUrl}/trashed?${n}`,{loadingMessage:`Loading trashed accounts...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed accounts:`,e),e}}async restoreAccount(e){try{let t=await n(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring account...`,showSuccessNotification:!0,successMessage:`Account restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring account:`,e),e}}async forceDeleteAccount(e){try{await t(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting account...`,showSuccessNotification:!0,successMessage:`Account permanently deleted`})}catch(e){throw console.error(`Error permanently deleting account:`,e),e}}async getAccountsForSelect(){try{let t=await e(`${this.baseUrl}`,{showLoading:!1}),n=t.data.data;return n.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching accounts for select:`,e),e}}async getAccountsByDepartment(t){try{let n=await e(`${this.baseUrl}/by-department/${t}`,{loadingMessage:`Loading accounts by department...`});return n.data.data}catch(e){throw console.error(`Error fetching accounts by department:`,e),e}}async searchAccounts(t){try{let n=await e(`${this.baseUrl}/search?query=${encodeURIComponent(t)}`,{showLoading:!1});return n.data.data}catch(e){throw console.error(`Error searching accounts:`,e),e}}async getAccountStats(){try{let t=await e(`${this.baseUrl}/stats`,{loadingMessage:`Loading account statistics...`});return t.data.data}catch(e){throw console.error(`Error fetching account statistics:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const p=new f,m=l(`accounts`,()=>{let e=o(),t=a(),n=c([]),r=c(null),i=c([]),l=c(null),f=c(d()),m=c(!1),h=c({is_active:!0}),g=u(()=>n.value.filter(e=>e.is_active)),_=u(()=>n.value.filter(e=>!e.is_active)),v=u(()=>g.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),y=u(()=>e=>n.value.filter(t=>t.account_type?.id===e)),b=u(()=>e=>n.value.filter(t=>t.currency?.id===e)),x=u(()=>{let e={};return Object.entries(t.query).forEach(([t,n])=>{n&&typeof n==`string`&&(e[t]=n)}),e}),S=async e=>{try{m.value=!0,e&&(h.value={...h.value,...e});let t=await p.getAccounts(h.value);n.value=t.data,f.value=t.pagination}catch(e){throw console.error(`Error fetching accounts:`,e),e}finally{m.value=!1}},C=async e=>{try{let t=await p.getAccount(e);return r.value=t,t}catch(e){throw console.error(`Error fetching account:`,e),e}},w=async e=>{try{let t=await p.createAccount(e);return n.value.unshift(t),f.value.total+=1,t}catch(e){throw console.error(`Error creating account:`,e),e}},T=async(e,t)=>{try{let i=await p.updateAccount(e,t),a=n.value.findIndex(t=>t.id===e);return a!==-1&&(n.value[a]=i),r.value?.id===e&&(r.value=i),i}catch(e){throw console.error(`Error updating account:`,e),e}},E=async e=>{try{await p.deleteAccount(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1),--f.value.total,r.value?.id===e&&(r.value=null)}catch(e){throw console.error(`Error deleting account:`,e),e}},D=async e=>{try{m.value=!0;let t=e||{},n=await p.getTrashedAccounts(t);i.value=n.data}catch(e){throw console.error(`Error fetching trashed accounts:`,e),e}finally{m.value=!1}},O=async e=>{try{let t=await p.restoreAccount(e),r=i.value.findIndex(t=>t.id===e);return r!==-1&&i.value.splice(r,1),n.value.unshift(t),f.value.total+=1,t}catch(e){throw console.error(`Error restoring account:`,e),e}},k=async e=>{try{await p.forceDeleteAccount(e);let t=i.value.findIndex(t=>t.id===e);t!==-1&&i.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting account:`,e),e}},A=async()=>{try{let e=await p.getAccountStats();return l.value=e,e}catch(e){throw console.error(`Error fetching account statistics:`,e),e}},j=async e=>{try{return await p.getAccountsByDepartment(e)}catch(e){throw console.error(`Error fetching accounts by department:`,e),e}},M=async e=>{try{return await p.searchAccounts(e)}catch(e){throw console.error(`Error searching accounts:`,e),e}},N=async()=>{try{return await p.getAccountsForSelect()}catch(e){return console.error(`Error fetching accounts for select:`,e),[]}},P=e=>{h.value={...h.value,...e}},F=()=>{h.value={}},I=()=>{r.value=null},L=e=>{let t={...h.value,search:e,page:1};h.value=t,V(t),W(t,!1)},R=(e,t)=>{let n={...h.value,sort_by:e,sort_direction:t,page:1};h.value=n,V(n),W(n,!1)},z=e=>{let t={...h.value,page:e};h.value=t,V(t),W(t,!1)},B=e=>{let t={...h.value,per_page:e,page:1};h.value=t,V(t),W(t,!1)},V=(n,r=!1)=>{let i={...t.query};Object.entries(n).forEach(([e,t])=>{t!=null&&t!==``?i[e]=String(t):delete i[e]});let a=r?`replace`:`push`;e[a]({query:i})},H=()=>{e.replace({query:{}})},U=()=>{h.value={...x.value}},W=async(e,t=!0)=>{t&&e&&V(e),await S(e)},G=()=>{n.value=[],r.value=null,i.value=[],l.value=null,f.value=d(),h.value={},m.value=!1};return s(()=>t.query,async()=>{if(U(),t.name&&t.name.toString().includes(`account`))try{await S(h.value)}catch(e){console.error(`Error fetching accounts on URL change:`,e)}},{immediate:!1,deep:!0}),{accounts:n,currentAccount:r,trashedAccounts:i,accountStats:l,pagination:f,loading:m,filters:h,activeAccounts:g,inactiveAccounts:_,accountsForSelect:v,accountsByType:y,accountsByCurrency:b,urlParams:x,fetchAccounts:S,fetchAccount:C,createAccount:w,updateAccount:T,deleteAccount:E,fetchTrashedAccounts:D,restoreAccount:O,forceDeleteAccount:k,fetchAccountStats:A,getAccountsByDepartment:j,searchAccounts:M,fetchAccountsForSelect:N,updateFilters:P,clearFilters:F,clearCurrentAccount:I,setSearch:L,setSort:R,setPage:z,setPerPage:B,updateUrlParams:V,clearUrlParams:H,syncFiltersWithUrl:U,fetchData:W,reset:G}});var h=m;export{h as b,m as c};