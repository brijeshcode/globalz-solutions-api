import{a8 as e,a9 as t,aQ as n,aa as r,ab as i,ac as a,aj as o,au as s}from"./index-DMjvBtjO.js";import{b as c}from"./tableUtils-jdfVzp2e.js";var l=class{baseUrl=`/setups/accounts/types`;async getAccountTypes(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}?${n}`,{loadingMessage:`Loading account types...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching account types:`,e),e}}async getAccountType(e){try{let n=await t(`${this.baseUrl}/${e}`,{loadingMessage:`Loading account type...`});return n.data.data}catch(e){throw console.error(`Error fetching accountType:`,e),e}}async createAccountType(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating account type...`,showSuccessNotification:!0,successMessage:`Account type created successfully`});return t.data.data}catch(e){throw console.error(`Error creating accountType:`,e),e}}async updateAccountType(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating account type...`,showSuccessNotification:!0,successMessage:`Account type updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating accountType:`,e),e}}async deleteAccountType(t){try{await e(`${this.baseUrl}/${t}`,{loadingMessage:`Deleting account type...`,showSuccessNotification:!0,successMessage:`Account type deleted successfully`})}catch(e){throw console.error(`Error deleting accountType:`,e),e}}async getTrashedAccountTypes(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}/trashed?${n}`,{loadingMessage:`Loading trashed account types...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed account types:`,e),e}}async restoreAccountType(e){try{let t=await r(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring accountType...`,showSuccessNotification:!0,successMessage:`AccountType restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring accountType:`,e),e}}async forceDeleteAccountType(t){try{await e(`${this.baseUrl}/${t}/force-delete`,{loadingMessage:`Permanently deleting accountType...`,showSuccessNotification:!0,successMessage:`AccountType permanently deleted`})}catch(e){throw console.error(`Error permanently deleting accountType:`,e),e}}async getAccountTypesForSelect(){try{let e=await t(`${this.baseUrl}`,{showLoading:!1}),n=e.data.data;return n.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching account types for select:`,e),e}}async getAccountTypeHierarchy(){try{let e=await t(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading accountType hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching accountType hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const u=new l,d=o(`accountTypes`,()=>{let e=n([]),t=n(null),r=n([]),i=n(c()),a=n(!1),o=n({}),l=s(()=>e.value.filter(e=>e.is_active)),d=s(()=>e.value.filter(e=>!e.is_active)),f=s(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),p=async t=>{try{a.value=!0,t&&(o.value={...o.value,...t});let n=await u.getAccountTypes(o.value);e.value=n.data,i.value=n.pagination}catch(e){throw console.error(`Error fetching account types:`,e),e}finally{a.value=!1}},m=async e=>{try{let n=await u.getAccountType(e);return t.value=n,n}catch(e){throw console.error(`Error fetching account type:`,e),e}},h=async t=>{try{let n=await u.createAccountType(t);return e.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error creating account type:`,e),e}},g=async(n,r)=>{try{let i=await u.updateAccountType(n,r),a=e.value.findIndex(e=>e.id===n);return a!==-1&&(e.value[a]=i),t.value?.id===n&&(t.value=i),i}catch(e){throw console.error(`Error updating account type:`,e),e}},_=async n=>{try{await u.deleteAccountType(n);let r=e.value.findIndex(e=>e.id===n);r!==-1&&e.value.splice(r,1),--i.value.total,t.value?.id===n&&(t.value=null)}catch(e){throw console.error(`Error deleting account type:`,e),e}},v=async e=>{try{a.value=!0;let t=e||{},n=await u.getTrashedAccountTypes(t);r.value=n.data}catch(e){throw console.error(`Error fetching trashed account types:`,e),e}finally{a.value=!1}},y=async t=>{try{let n=await u.restoreAccountType(t),a=r.value.findIndex(e=>e.id===t);return a!==-1&&r.value.splice(a,1),e.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error restoring account type:`,e),e}},b=async e=>{try{await u.forceDeleteAccountType(e);let t=r.value.findIndex(t=>t.id===e);t!==-1&&r.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting account type:`,e),e}},x=e=>{o.value={...o.value,...e}},S=()=>{o.value={}},C=()=>{t.value=null},w=()=>{e.value=[],t.value=null,r.value=[],i.value=c(),o.value={},a.value=!1},T=async()=>{try{return await u.getAccountTypesForSelect()}catch(e){return console.error(`Error fetching account types for select:`,e),[]}};return{accountTypes:e,currentAccountType:t,trashedAccountTypes:r,pagination:i,loading:a,filters:o,activeAccountTypes:l,inactiveAccountTypes:d,accountTypesForSelect:f,fetchAccountTypes:p,fetchAccountType:m,createAccountType:h,updateAccountType:g,deleteAccountType:_,fetchTrashedAccountTypes:v,restoreAccountType:y,forceDeleteAccountType:b,updateFilters:x,clearFilters:S,clearCurrentAccountType:C,reset:w,fetchAccountTypesForSelect:T}});export{d as b};