import{a5 as e,a6 as t,a7 as n,a8 as r,a9 as i,aN as a,ag as o,ar as s}from"./index-C0jcYHVD.js";import{b as c}from"./tableUtils-BvWofAYZ.js";var l=class{baseUrl=`/expense-transactions`;async getExpenseTransactions(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}?${n}`,{loadingMessage:`Loading expense transactions...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching expense transactions:`,e),e}}async getExpenseTransaction(e){try{let n=await t(`${this.baseUrl}/${e}`,{loadingMessage:`Loading expense transaction...`});return n.data.data}catch(e){throw console.error(`Error fetching expense transaction:`,e),e}}async createExpenseTransaction(e){try{let t=await r(this.baseUrl,e,{loadingMessage:`Creating expense transaction...`,showSuccessNotification:!0,successMessage:`Expense transaction created successfully`});return t.data.data}catch(e){throw console.error(`Error creating expense transaction:`,e),e}}async createExpenseTransactionWithFiles(e){try{let t=await r(this.baseUrl,e,{loadingMessage:`Creating expense transaction...`,showSuccessNotification:!0,successMessage:`Expense transaction created successfully`,headers:{"Content-Type":`multipart/form-data`}});return t.data.data}catch(e){throw console.error(`Error creating expense transaction with files:`,e),e}}async updateExpenseTransaction(e,t){try{let n=await i(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating expense transaction...`,showSuccessNotification:!0,successMessage:`Expense transaction updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating expense transaction:`,e),e}}async updateExpenseTransactionWithFiles(e,t){try{console.log(`we reach to service page`);let n=await r(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating expense transaction...`,showSuccessNotification:!0,successMessage:`Expense transaction updated successfully`,headers:{"Content-Type":`multipart/form-data`}});return n.data.data}catch(e){throw console.error(`Error updating expense transaction with files:`,e),e}}async deleteExpenseTransaction(t){try{await e(`${this.baseUrl}/${t}`,{loadingMessage:`Deleting expense transaction...`,showSuccessNotification:!0,successMessage:`Expense transaction deleted successfully`})}catch(e){throw console.error(`Error deleting expense transaction:`,e),e}}async getTrashedExpenseTransactions(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}/trashed?${n}`,{loadingMessage:`Loading trashed expense transactions...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed expense transactions:`,e),e}}async restoreExpenseTransaction(e){try{let t=await n(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring expense transaction...`,showSuccessNotification:!0,successMessage:`Expense transaction restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring expense transaction:`,e),e}}async forceDeleteExpenseTransaction(t){try{await e(`${this.baseUrl}/${t}/force-delete`,{loadingMessage:`Permanently deleting expense transaction...`,showSuccessNotification:!0,successMessage:`Expense transaction permanently deleted`})}catch(e){throw console.error(`Error permanently deleting expense transaction:`,e),e}}async getExpenseTransactionsForSelect(){try{let e=await t(`${this.baseUrl}`,{showLoading:!1}),n=e.data.data;return n.map(e=>({value:e.id,label:`${e.code} - ${e.subject||`No subject`}`,disabled:!1}))}catch(e){throw console.error(`Error fetching expense transactions for select:`,e),e}}async getExpenseTransactionsByDateRange(e,n){try{let r=await t(`${this.baseUrl}?start_date=${e}&end_date=${n}`,{loadingMessage:`Loading expense transactions by date range...`});return r.data.data}catch(e){throw console.error(`Error fetching expense transactions by date range:`,e),e}}async getExpenseTransactionsByCategory(e){try{let n=await t(`${this.baseUrl}?expense_category_id=${e}`,{loadingMessage:`Loading expense transactions by category...`});return n.data.data}catch(e){throw console.error(`Error fetching expense transactions by category:`,e),e}}async getExpenseTransactionsByAccount(e){try{let n=await t(`${this.baseUrl}?account_id=${e}`,{loadingMessage:`Loading expense transactions by account...`});return n.data.data}catch(e){throw console.error(`Error fetching expense transactions by account:`,e),e}}async searchExpenseTransactions(e){try{let n=await t(`${this.baseUrl}/search?query=${encodeURIComponent(e)}`,{showLoading:!1});return n.data.data}catch(e){throw console.error(`Error searching expense transactions:`,e),e}}async getExpenseTransactionStats(){try{let e=await t(`${this.baseUrl}/stats`,{loadingMessage:`Loading expense transaction statistics...`});return e.data.data}catch(e){throw console.error(`Error fetching expense transaction statistics:`,e),e}}async getNextSuggestedCode(){try{let e=await t(`${this.baseUrl}/next-code`,{showLoading:!1});return e.data.data.code}catch(e){throw console.error(`Error fetching next suggested code:`,e),e}}async validateCode(e,n){try{let r=new URLSearchParams;r.append(`code`,e),n&&r.append(`exclude_id`,String(n));let i=await t(`${this.baseUrl}/validate-code?${r.toString()}`,{showLoading:!1});return i.data.data.is_unique}catch(e){throw console.error(`Error validating expense transaction code:`,e),e}}async exportExpenseTransactions(e){try{let n=this.buildQueryParams(e),r=await t(`${this.baseUrl}/export?${n}`,{loadingMessage:`Exporting expense transactions...`,responseType:`blob`});return r.data.data}catch(e){throw console.error(`Error exporting expense transactions:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const u=new l,d=o(`expenseTransactions`,()=>{let e=a([]),t=a(null),n=a([]),r=a(null),i=a(c()),o=a(!1),l=a({}),d=a(``),f=s(()=>t=>e.value.filter(e=>e.date===t)),p=s(()=>t=>e.value.filter(e=>e.expense_category_id===t)),m=s(()=>t=>e.value.filter(e=>e.account_id===t)),h=s(()=>(t,n)=>e.value.filter(e=>{let r=new Date(e.date),i=new Date(t),a=new Date(n);return r>=i&&r<=a})),g=s(()=>t=>e.value.filter(e=>e.expense_category_id===t).reduce((e,t)=>e+parseFloat(t.amount),0)),_=s(()=>t=>e.value.filter(e=>e.account_id===t).reduce((e,t)=>e+parseFloat(t.amount),0)),v=s(()=>e.value.map(e=>({value:e.id,label:`${e.code} - ${e.subject||`No subject`}`,disabled:!1}))),y=s(()=>[...e.value].sort((e,t)=>new Date(t.created_at).getTime()-new Date(e.created_at).getTime()).slice(0,10)),b=s(()=>(t,n)=>e.value.filter(e=>{let r=new Date(e.date);return r.getFullYear()===t&&r.getMonth()+1===n})),x=async t=>{try{o.value=!0,t&&(l.value={...l.value,...t});let n=await u.getExpenseTransactions(l.value);e.value=n.data,i.value=n.pagination}catch(e){throw console.error(`Error fetching expense transactions:`,e),e}finally{o.value=!1}},S=async e=>{try{let n=await u.getExpenseTransaction(e);return t.value=n,n}catch(e){throw console.error(`Error fetching expense transaction:`,e),e}},C=async t=>{try{let n=await u.createExpenseTransaction(t);if(e.value.unshift(n),i.value.total+=1,r.value){r.value.total+=1;let e=parseFloat(n.amount);r.value.total_amount=(parseFloat(r.value.total_amount)+e).toFixed(2)}return n}catch(e){throw console.error(`Error creating expense transaction:`,e),e}},w=async t=>{try{let n=await u.createExpenseTransactionWithFiles(t);if(e.value.unshift(n),i.value.total+=1,r.value){r.value.total+=1;let e=parseFloat(n.amount);r.value.total_amount=(parseFloat(r.value.total_amount)+e).toFixed(2)}return n}catch(e){throw console.error(`Error creating expense transaction with files:`,e),e}},T=async(n,r)=>{try{let i=await u.updateExpenseTransaction(n,r),a=e.value.findIndex(e=>e.id===n);return a!==-1&&(e.value[a]=i),t.value?.id===n&&(t.value=i),i}catch(e){throw console.error(`Error updating expense transaction:`,e),e}},E=async(n,r)=>{try{console.log(`we reach to transaction page`);let i=await u.updateExpenseTransactionWithFiles(n,r),a=e.value.findIndex(e=>e.id===n);return a!==-1&&(e.value[a]=i),t.value?.id===n&&(t.value=i),i}catch(e){throw console.error(`Error updating expense transaction with files:`,e),e}},D=async n=>{try{await u.deleteExpenseTransaction(n);let r=e.value.findIndex(e=>e.id===n);r!==-1&&e.value.splice(r,1),--i.value.total,t.value?.id===n&&(t.value=null)}catch(e){throw console.error(`Error deleting expense transaction:`,e),e}},O=async e=>{try{o.value=!0;let t=e||{},r=await u.getTrashedExpenseTransactions(t);n.value=r.data}catch(e){throw console.error(`Error fetching trashed expense transactions:`,e),e}finally{o.value=!1}},k=async t=>{try{let r=await u.restoreExpenseTransaction(t),a=n.value.findIndex(e=>e.id===t);return a!==-1&&n.value.splice(a,1),e.value.unshift(r),i.value.total+=1,r}catch(e){throw console.error(`Error restoring expense transaction:`,e),e}},A=async e=>{try{await u.forceDeleteExpenseTransaction(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting expense transaction:`,e),e}},j=async(e,t)=>{try{return await u.getExpenseTransactionsByDateRange(e,t)}catch(e){throw console.error(`Error fetching expense transactions by date range:`,e),e}},M=async e=>{try{return await u.getExpenseTransactionsByCategory(e)}catch(e){throw console.error(`Error fetching expense transactions by category:`,e),e}},N=async e=>{try{return await u.getExpenseTransactionsByAccount(e)}catch(e){throw console.error(`Error fetching expense transactions by account:`,e),e}},P=async()=>{try{let e=await u.getExpenseTransactionStats();return r.value=e,e}catch(e){throw console.error(`Error fetching expense transaction statistics:`,e),e}},F=async()=>{try{let e=await u.getNextSuggestedCode();return d.value=e,e}catch(e){throw console.error(`Error fetching next suggested code:`,e),e}},I=async(e,t)=>{try{return await u.validateCode(e,t)}catch(e){throw console.error(`Error validating expense transaction code:`,e),e}},L=async e=>{try{return await u.exportExpenseTransactions(e)}catch(e){throw console.error(`Error exporting expense transactions:`,e),e}},R=async e=>{try{return await u.searchExpenseTransactions(e)}catch(e){throw console.error(`Error searching expense transactions:`,e),e}},z=e=>{l.value={...l.value,...e}},B=()=>{l.value={}},V=()=>{t.value=null},H=()=>{e.value=[],t.value=null,n.value=[],r.value=null,i.value=c(),l.value={},o.value=!1,d.value=``},U=async()=>{try{return await u.getExpenseTransactionsForSelect()}catch(e){return console.error(`Error fetching expense transactions for select:`,e),[]}};return{expenseTransactions:e,currentExpenseTransaction:t,trashedExpenseTransactions:n,expenseTransactionStats:r,pagination:i,loading:o,filters:l,nextSuggestedCode:d,expenseTransactionsByDate:f,expenseTransactionsByCategory:p,expenseTransactionsByAccount:m,expenseTransactionsByDateRange:h,totalAmountByCategory:g,totalAmountByAccount:_,expenseTransactionsForSelect:v,recentExpenseTransactions:y,expenseTransactionsByMonth:b,fetchExpenseTransactions:x,fetchExpenseTransaction:S,createExpenseTransaction:C,createExpenseTransactionWithFiles:w,updateExpenseTransaction:T,updateExpenseTransactionWithFiles:E,deleteExpenseTransaction:D,fetchTrashedExpenseTransactions:O,restoreExpenseTransaction:k,forceDeleteExpenseTransaction:A,fetchExpenseTransactionsByDateRange:j,fetchExpenseTransactionsByCategory:M,fetchExpenseTransactionsByAccount:N,fetchExpenseTransactionStats:P,fetchNextSuggestedCode:F,validateCode:I,exportExpenseTransactions:L,searchExpenseTransactions:R,updateFilters:z,clearFilters:B,clearCurrentExpenseTransaction:V,reset:H,fetchExpenseTransactionsForSelect:U}});export{d as b};