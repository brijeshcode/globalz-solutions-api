import{$ as e,Q as t,R as n,S as r,T as i,U as a,aa as o,aw as s}from"./index-CxTKwM3X.js";var c=class{baseUrl=`/setups/customers/types`;async getCustomerTypes(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}?${t}`,{loadingMessage:`Loading customer types...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customer types:`,e),e}}async getCustomerType(e){try{let t=await n(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer type...`});return t.data.data}catch(e){throw console.error(`Error fetching customerType:`,e),e}}async createCustomerType(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating customer type...`,showSuccessNotification:!0,successMessage:`Customer type created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customerType:`,e),e}}async updateCustomerType(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer type...`,showSuccessNotification:!0,successMessage:`Customer type updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customerType:`,e),e}}async deleteCustomerType(e){try{await t(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting customer type...`,showSuccessNotification:!0,successMessage:`Customer type deleted successfully`})}catch(e){throw console.error(`Error deleting customerType:`,e),e}}async getTrashedCustomerTypes(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}/trashed?${t}`,{loadingMessage:`Loading trashed customer types...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customer types:`,e),e}}async restoreCustomerType(e){try{let t=await r(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customerType...`,showSuccessNotification:!0,successMessage:`CustomerType restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customerType:`,e),e}}async forceDeleteCustomerType(e){try{await t(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting customerType...`,showSuccessNotification:!0,successMessage:`CustomerType permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customerType:`,e),e}}async getCustomerTypesForSelect(){try{let e=await n(`${this.baseUrl}`,{showLoading:!1}),t=e.data.data;return t.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching customer types for select:`,e),e}}async getCustomerTypeHierarchy(){try{let e=await n(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading customerType hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching customerType hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const l=new c,u=e(`customerTypes`,()=>{let e=s([]),t=s(null),n=s([]),r=s({current_page:1,per_page:20,total:0,last_page:1,from:null,to:null,has_more_pages:!1,next_page_url:null,prev_page_url:null,first_page_url:``,last_page_url:``}),i=s(!1),a=s({}),c=o(()=>e.value.filter(e=>e.is_active)),u=o(()=>e.value.filter(e=>!e.is_active)),d=o(()=>c.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),f=async t=>{try{i.value=!0,t&&(a.value={...a.value,...t});let n=await l.getCustomerTypes(a.value);e.value=n.data,r.value=n.pagination}catch(e){throw console.error(`Error fetching customer types:`,e),e}finally{i.value=!1}},p=async e=>{try{let n=await l.getCustomerType(e);return t.value=n,n}catch(e){throw console.error(`Error fetching customer type:`,e),e}},m=async t=>{try{let n=await l.createCustomerType(t);return e.value.unshift(n),r.value.total+=1,n}catch(e){throw console.error(`Error creating customer type:`,e),e}},h=async(n,r)=>{try{let i=await l.updateCustomerType(n,r),a=e.value.findIndex(e=>e.id===n);return a!==-1&&(e.value[a]=i),t.value?.id===n&&(t.value=i),i}catch(e){throw console.error(`Error updating customer type:`,e),e}},g=async n=>{try{await l.deleteCustomerType(n);let i=e.value.findIndex(e=>e.id===n);i!==-1&&e.value.splice(i,1),--r.value.total,t.value?.id===n&&(t.value=null)}catch(e){throw console.error(`Error deleting customer type:`,e),e}},_=async e=>{try{i.value=!0;let t=e||{},r=await l.getTrashedCustomerTypes(t);n.value=r.data}catch(e){throw console.error(`Error fetching trashed customer types:`,e),e}finally{i.value=!1}},v=async t=>{try{let i=await l.restoreCustomerType(t),a=n.value.findIndex(e=>e.id===t);return a!==-1&&n.value.splice(a,1),e.value.unshift(i),r.value.total+=1,i}catch(e){throw console.error(`Error restoring customer type:`,e),e}},y=async e=>{try{await l.forceDeleteCustomerType(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer type:`,e),e}},b=e=>{a.value={...a.value,...e}},x=()=>{a.value={}},S=()=>{t.value=null},C=()=>{e.value=[],t.value=null,n.value=[],r.value={current_page:1,per_page:20,total:0,last_page:1,from:null,to:null,has_more_pages:!1,next_page_url:null,prev_page_url:null,first_page_url:``,last_page_url:``},a.value={},i.value=!1},w=async()=>{try{return await l.getCustomerTypesForSelect()}catch(e){return console.error(`Error fetching customer types for select:`,e),[]}};return{customerTypes:e,currentCustomerType:t,trashedCustomerTypes:n,pagination:r,loading:i,filters:a,activeCustomerTypes:c,inactiveCustomerTypes:u,customerTypesForSelect:d,fetchCustomerTypes:f,fetchCustomerType:p,createCustomerType:m,updateCustomerType:h,deleteCustomerType:g,fetchTrashedCustomerTypes:_,restoreCustomerType:v,forceDeleteCustomerType:y,updateFilters:b,clearFilters:x,clearCurrentCustomerType:S,reset:C,fetchCustomerTypesForSelect:w}});var d=class{baseUrl=`/setups/customers/zones`;async getCustomerZones(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}?${t}`,{loadingMessage:`Loading customer zones...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customer zones:`,e),e}}async getCustomerZone(e){try{let t=await n(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer zone...`});return t.data.data}catch(e){throw console.error(`Error fetching customer zone:`,e),e}}async createCustomerZone(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customer zone:`,e),e}}async updateCustomerZone(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer zone:`,e),e}}async deleteCustomerZone(e){try{await t(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone deleted successfully`})}catch(e){throw console.error(`Error deleting customer zone:`,e),e}}async getTrashedCustomerZones(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}/trashed?${t}`,{loadingMessage:`Loading trashed customer zones...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customer zones:`,e),e}}async restoreCustomerZone(e){try{let t=await r(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customer zone:`,e),e}}async forceDeleteCustomerZone(e){try{await t(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customer zone:`,e),e}}async getCustomerZonesForSelect(){try{let e=await n(`${this.baseUrl}`,{showLoading:!1}),t=e.data.data;return t.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching customer zones for select:`,e),e}}async getCustomerZoneHierarchy(){try{let e=await n(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading customer zone hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching customer zone hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const f=new d,p=e(`customerZones`,()=>{let e=s([]),t=s(null),n=s([]),r=s({current_page:1,per_page:20,total:0,last_page:1,from:null,to:null,has_more_pages:!1,next_page_url:null,prev_page_url:null,first_page_url:``,last_page_url:``}),i=s(!1),a=s({}),c=o(()=>e.value.filter(e=>e.is_active)),l=o(()=>e.value.filter(e=>!e.is_active)),u=o(()=>c.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),d=async t=>{try{i.value=!0,t&&(a.value={...a.value,...t});let n=await f.getCustomerZones(a.value);e.value=n.data,r.value=n.pagination}catch(e){throw console.error(`Error fetching customer zones:`,e),e}finally{i.value=!1}},p=async e=>{try{let n=await f.getCustomerZone(e);return t.value=n,n}catch(e){throw console.error(`Error fetching customer zone:`,e),e}},m=async t=>{try{let n=await f.createCustomerZone(t);return e.value.unshift(n),r.value.total+=1,n}catch(e){throw console.error(`Error creating customer zone:`,e),e}},h=async(n,r)=>{try{let i=await f.updateCustomerZone(n,r),a=e.value.findIndex(e=>e.id===n);return a!==-1&&(e.value[a]=i),t.value?.id===n&&(t.value=i),i}catch(e){throw console.error(`Error updating customer zone:`,e),e}},g=async n=>{try{await f.deleteCustomerZone(n);let i=e.value.findIndex(e=>e.id===n);i!==-1&&e.value.splice(i,1),--r.value.total,t.value?.id===n&&(t.value=null)}catch(e){throw console.error(`Error deleting customer zone:`,e),e}},_=async e=>{try{i.value=!0;let t=e||{},r=await f.getTrashedCustomerZones(t);n.value=r.data}catch(e){throw console.error(`Error fetching trashed customer zones:`,e),e}finally{i.value=!1}},v=async t=>{try{let i=await f.restoreCustomerZone(t),a=n.value.findIndex(e=>e.id===t);return a!==-1&&n.value.splice(a,1),e.value.unshift(i),r.value.total+=1,i}catch(e){throw console.error(`Error restoring customer zone:`,e),e}},y=async e=>{try{await f.forceDeleteCustomerZone(e);let t=n.value.findIndex(t=>t.id===e);t!==-1&&n.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer zone:`,e),e}},b=e=>{a.value={...a.value,...e}},x=()=>{a.value={}},S=()=>{t.value=null},C=()=>{e.value=[],t.value=null,n.value=[],r.value={current_page:1,per_page:20,total:0,last_page:1,from:null,to:null,has_more_pages:!1,next_page_url:null,prev_page_url:null,first_page_url:``,last_page_url:``},a.value={},i.value=!1},w=async()=>{try{return await f.getCustomerZonesForSelect()}catch(e){return console.error(`Error fetching customer zones for select:`,e),[]}};return{customerZones:e,currentCustomerZone:t,trashedCustomerZones:n,pagination:r,loading:i,filters:a,activeCustomerZones:c,inactiveCustomerZones:l,customerZonesForSelect:u,fetchCustomerZones:d,fetchCustomerZone:p,createCustomerZone:m,updateCustomerZone:h,deleteCustomerZone:g,fetchTrashedCustomerZones:_,restoreCustomerZone:v,forceDeleteCustomerZone:y,updateFilters:b,clearFilters:x,clearCurrentCustomerZone:S,reset:C,fetchCustomerZonesForSelect:w}});var m=p;export{m as b,p as c,u as d};