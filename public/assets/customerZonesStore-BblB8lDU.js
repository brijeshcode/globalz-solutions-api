import{aU as e,ab as t,ac as n,ad as r,ae as i,af as a,am as o,ay as s}from"./index-roqPwd_D.js";import{b as c}from"./tableUtils-jdfVzp2e.js";var l=class{baseUrl=`/setups/customers/types`;async getCustomerTypes(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}?${t}`,{loadingMessage:`Loading customer types...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customer types:`,e),e}}async getCustomerType(e){try{let t=await n(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer type...`});return t.data.data}catch(e){throw console.error(`Error fetching customerType:`,e),e}}async createCustomerType(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating customer type...`,showSuccessNotification:!0,successMessage:`Customer type created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customerType:`,e),e}}async updateCustomerType(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer type...`,showSuccessNotification:!0,successMessage:`Customer type updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customerType:`,e),e}}async deleteCustomerType(e){try{await t(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting customer type...`,showSuccessNotification:!0,successMessage:`Customer type deleted successfully`})}catch(e){throw console.error(`Error deleting customerType:`,e),e}}async getTrashedCustomerTypes(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}/trashed?${t}`,{loadingMessage:`Loading trashed customer types...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customer types:`,e),e}}async restoreCustomerType(e){try{let t=await r(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customerType...`,showSuccessNotification:!0,successMessage:`CustomerType restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customerType:`,e),e}}async forceDeleteCustomerType(e){try{await t(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting customerType...`,showSuccessNotification:!0,successMessage:`CustomerType permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customerType:`,e),e}}async getCustomerTypesForSelect(){try{let e=await n(`${this.baseUrl}`,{showLoading:!1}),t=e.data.data;return t.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching customer types for select:`,e),e}}async getCustomerTypeHierarchy(){try{let e=await n(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading customerType hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching customerType hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const u=new l,d=o(`customerTypes`,()=>{let t=e([]),n=e(null),r=e([]),i=e(c()),a=e(!1),o=e({}),l=s(()=>t.value.filter(e=>e.is_active)),d=s(()=>t.value.filter(e=>!e.is_active)),f=s(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),p=async e=>{try{a.value=!0,e&&(o.value={...o.value,...e});let n=await u.getCustomerTypes(o.value);t.value=n.data,i.value=n.pagination}catch(e){throw console.error(`Error fetching customer types:`,e),e}finally{a.value=!1}},m=async e=>{try{let t=await u.getCustomerType(e);return n.value=t,t}catch(e){throw console.error(`Error fetching customer type:`,e),e}},h=async e=>{try{let n=await u.createCustomerType(e);return t.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error creating customer type:`,e),e}},g=async(e,r)=>{try{let i=await u.updateCustomerType(e,r),a=t.value.findIndex(t=>t.id===e);return a!==-1&&(t.value[a]=i),n.value?.id===e&&(n.value=i),i}catch(e){throw console.error(`Error updating customer type:`,e),e}},_=async e=>{try{await u.deleteCustomerType(e);let r=t.value.findIndex(t=>t.id===e);r!==-1&&t.value.splice(r,1),--i.value.total,n.value?.id===e&&(n.value=null)}catch(e){throw console.error(`Error deleting customer type:`,e),e}},v=async e=>{try{a.value=!0;let t=e||{},n=await u.getTrashedCustomerTypes(t);r.value=n.data}catch(e){throw console.error(`Error fetching trashed customer types:`,e),e}finally{a.value=!1}},y=async e=>{try{let n=await u.restoreCustomerType(e),a=r.value.findIndex(t=>t.id===e);return a!==-1&&r.value.splice(a,1),t.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error restoring customer type:`,e),e}},b=async e=>{try{await u.forceDeleteCustomerType(e);let t=r.value.findIndex(t=>t.id===e);t!==-1&&r.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer type:`,e),e}},x=e=>{o.value={...o.value,...e}},S=()=>{o.value={}},C=()=>{n.value=null},w=()=>{t.value=[],n.value=null,r.value=[],i.value=c(),o.value={},a.value=!1},T=async()=>{try{return await u.getCustomerTypesForSelect()}catch(e){return console.error(`Error fetching customer types for select:`,e),[]}};return{customerTypes:t,currentCustomerType:n,trashedCustomerTypes:r,pagination:i,loading:a,filters:o,activeCustomerTypes:l,inactiveCustomerTypes:d,customerTypesForSelect:f,fetchCustomerTypes:p,fetchCustomerType:m,createCustomerType:h,updateCustomerType:g,deleteCustomerType:_,fetchTrashedCustomerTypes:v,restoreCustomerType:y,forceDeleteCustomerType:b,updateFilters:x,clearFilters:S,clearCurrentCustomerType:C,reset:w,fetchCustomerTypesForSelect:T}});var f=class{baseUrl=`/setups/customers/groups`;async getCustomerGroups(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}?${t}`,{loadingMessage:`Loading customer groups...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customer groups:`,e),e}}async getCustomerGroup(e){try{let t=await n(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer group...`});return t.data.data}catch(e){throw console.error(`Error fetching customer group:`,e),e}}async createCustomerGroup(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customer group:`,e),e}}async updateCustomerGroup(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer group:`,e),e}}async deleteCustomerGroup(e){try{await t(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup deleted successfully`})}catch(e){throw console.error(`Error deleting customer group:`,e),e}}async getTrashedCustomerGroups(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}/trashed?${t}`,{loadingMessage:`Loading trashed customer groups...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customer groups:`,e),e}}async restoreCustomerGroup(e){try{let t=await r(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customer group:`,e),e}}async forceDeleteCustomerGroup(e){try{await t(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting customer group...`,showSuccessNotification:!0,successMessage:`CustomerGroup permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customer group:`,e),e}}async getCustomerGroupsForSelect(){try{let e=await n(`${this.baseUrl}`,{showLoading:!1}),t=e.data.data;return t.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching customer groups for select:`,e),e}}async getCustomerGroupHierarchy(){try{let e=await n(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading customer group hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching customer group hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const p=new f,m=o(`customerGroups`,()=>{let t=e([]),n=e(null),r=e([]),i=e(c()),a=e(!1),o=e({}),l=s(()=>t.value.filter(e=>e.is_active)),u=s(()=>t.value.filter(e=>!e.is_active)),d=s(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),f=async e=>{try{a.value=!0,e&&(o.value={...o.value,...e});let n=await p.getCustomerGroups(o.value);t.value=n.data,i.value=n.pagination}catch(e){throw console.error(`Error fetching customer groups:`,e),e}finally{a.value=!1}},m=async e=>{try{let t=await p.getCustomerGroup(e);return n.value=t,t}catch(e){throw console.error(`Error fetching customer group:`,e),e}},h=async e=>{try{let n=await p.createCustomerGroup(e);return t.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error creating customer group:`,e),e}},g=async(e,r)=>{try{let i=await p.updateCustomerGroup(e,r),a=t.value.findIndex(t=>t.id===e);return a!==-1&&(t.value[a]=i),n.value?.id===e&&(n.value=i),i}catch(e){throw console.error(`Error updating customer group:`,e),e}},_=async e=>{try{await p.deleteCustomerGroup(e);let r=t.value.findIndex(t=>t.id===e);r!==-1&&t.value.splice(r,1),--i.value.total,n.value?.id===e&&(n.value=null)}catch(e){throw console.error(`Error deleting customer group:`,e),e}},v=async e=>{try{a.value=!0;let t=e||{},n=await p.getTrashedCustomerGroups(t);r.value=n.data}catch(e){throw console.error(`Error fetching trashed customer groups:`,e),e}finally{a.value=!1}},y=async e=>{try{let n=await p.restoreCustomerGroup(e),a=r.value.findIndex(t=>t.id===e);return a!==-1&&r.value.splice(a,1),t.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error restoring customer group:`,e),e}},b=async e=>{try{await p.forceDeleteCustomerGroup(e);let t=r.value.findIndex(t=>t.id===e);t!==-1&&r.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer group:`,e),e}},x=e=>{o.value={...o.value,...e}},S=()=>{o.value={}},C=()=>{n.value=null},w=()=>{t.value=[],n.value=null,r.value=[],i.value=c(),o.value={},a.value=!1},T=async()=>{try{return await p.getCustomerGroupsForSelect()}catch(e){return console.error(`Error fetching customer groups for select:`,e),[]}};return{customerGroups:t,currentCustomerGroup:n,trashedCustomerGroups:r,pagination:i,loading:a,filters:o,activeCustomerGroups:l,inactiveCustomerGroups:u,customerGroupsForSelect:d,fetchCustomerGroups:f,fetchCustomerGroup:m,createCustomerGroup:h,updateCustomerGroup:g,deleteCustomerGroup:_,fetchTrashedCustomerGroups:v,restoreCustomerGroup:y,forceDeleteCustomerGroup:b,updateFilters:x,clearFilters:S,clearCurrentCustomerGroup:C,reset:w,fetchCustomerGroupsForSelect:T}});var h=m,g=class{baseUrl=`/setups/customers/provinces`;async getCustomerProvinces(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}?${t}`,{loadingMessage:`Loading Customer Provinces...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customer Provinces:`,e),e}}async getCustomerProvince(e){try{let t=await n(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer Province...`});return t.data.data}catch(e){throw console.error(`Error fetching customer province:`,e),e}}async createCustomerProvince(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating customer province...`,showSuccessNotification:!0,successMessage:`Customer province created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customer province:`,e),e}}async updateCustomerProvince(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer province...`,showSuccessNotification:!0,successMessage:`Customer province updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer province:`,e),e}}async deleteCustomerProvince(e){try{await t(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting customer province...`,showSuccessNotification:!0,successMessage:`Customer province deleted successfully`})}catch(e){throw console.error(`Error deleting customer province:`,e),e}}async getTrashedCustomerProvinces(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}/trashed?${t}`,{loadingMessage:`Loading trashed customer provinces...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customer provinces:`,e),e}}async restoreCustomerProvince(e){try{let t=await r(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customer province...`,showSuccessNotification:!0,successMessage:`Customer Province restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customer province:`,e),e}}async forceDeleteCustomerProvince(e){try{await t(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting customer province...`,showSuccessNotification:!0,successMessage:`Customer province permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customer province:`,e),e}}async getCustomerProvincesForSelect(){try{let e=await n(`${this.baseUrl}`,{showLoading:!1}),t=e.data.data;return t.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching customer provinces for select:`,e),e}}async getCustomerProvinceHierarchy(){try{let e=await n(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading customer province hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching customer province hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const _=new g,v=o(`customerProvinces`,()=>{let t=e([]),n=e(null),r=e([]),i=e(c()),a=e(!1),o=e({}),l=s(()=>t.value.filter(e=>e.is_active)),u=s(()=>t.value.filter(e=>!e.is_active)),d=s(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),f=async e=>{try{a.value=!0,e&&(o.value={...o.value,...e});let n=await _.getCustomerProvinces(o.value);t.value=n.data,i.value=n.pagination}catch(e){throw console.error(`Error fetching customer provinces:`,e),e}finally{a.value=!1}},p=async e=>{try{let t=await _.getCustomerProvince(e);return n.value=t,t}catch(e){throw console.error(`Error fetching customer province:`,e),e}},m=async e=>{try{let n=await _.createCustomerProvince(e);return t.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error creating customer province:`,e),e}},h=async(e,r)=>{try{let i=await _.updateCustomerProvince(e,r),a=t.value.findIndex(t=>t.id===e);return a!==-1&&(t.value[a]=i),n.value?.id===e&&(n.value=i),i}catch(e){throw console.error(`Error updating customer province:`,e),e}},g=async e=>{try{await _.deleteCustomerProvince(e);let r=t.value.findIndex(t=>t.id===e);r!==-1&&t.value.splice(r,1),--i.value.total,n.value?.id===e&&(n.value=null)}catch(e){throw console.error(`Error deleting customer province:`,e),e}},v=async e=>{try{a.value=!0;let t=e||{},n=await _.getTrashedCustomerProvinces(t);r.value=n.data}catch(e){throw console.error(`Error fetching trashed customer provinces:`,e),e}finally{a.value=!1}},y=async e=>{try{let n=await _.restoreCustomerProvince(e),a=r.value.findIndex(t=>t.id===e);return a!==-1&&r.value.splice(a,1),t.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error restoring customer province:`,e),e}},b=async e=>{try{await _.forceDeleteCustomerProvince(e);let t=r.value.findIndex(t=>t.id===e);t!==-1&&r.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer province:`,e),e}},x=e=>{o.value={...o.value,...e}},S=()=>{o.value={}},C=()=>{n.value=null},w=()=>{t.value=[],n.value=null,r.value=[],i.value=c(),o.value={},a.value=!1},T=async()=>{try{return await _.getCustomerProvincesForSelect()}catch(e){return console.error(`Error fetching customer provinces for select:`,e),[]}};return{customerProvinces:t,currentCustomerProvince:n,trashedCustomerProvinces:r,pagination:i,loading:a,filters:o,activeCustomerProvinces:l,inactiveCustomerProvinces:u,customerProvincesForSelect:d,fetchCustomerProvinces:f,fetchCustomerProvince:p,createCustomerProvince:m,updateCustomerProvince:h,deleteCustomerProvince:g,fetchTrashedCustomerProvinces:v,restoreCustomerProvince:y,forceDeleteCustomerProvince:b,updateFilters:x,clearFilters:S,clearCurrentCustomerProvince:C,reset:w,fetchCustomerProvincesForSelect:T}});var y=v,b=class{baseUrl=`/setups/customers/zones`;async getCustomerZones(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}?${t}`,{loadingMessage:`Loading customer zones...`,showLoading:!0});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching customer zones:`,e),e}}async getCustomerZone(e){try{let t=await n(`${this.baseUrl}/${e}`,{loadingMessage:`Loading customer zone...`});return t.data.data}catch(e){throw console.error(`Error fetching customer zone:`,e),e}}async createCustomerZone(e){try{let t=await i(this.baseUrl,e,{loadingMessage:`Creating customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone created successfully`});return t.data.data}catch(e){throw console.error(`Error creating customer zone:`,e),e}}async updateCustomerZone(e,t){try{let n=await a(`${this.baseUrl}/${e}`,t,{loadingMessage:`Updating customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone updated successfully`});return n.data.data}catch(e){throw console.error(`Error updating customer zone:`,e),e}}async deleteCustomerZone(e){try{await t(`${this.baseUrl}/${e}`,{loadingMessage:`Deleting customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone deleted successfully`})}catch(e){throw console.error(`Error deleting customer zone:`,e),e}}async getTrashedCustomerZones(e){try{let t=this.buildQueryParams(e),r=await n(`${this.baseUrl}/trashed?${t}`,{loadingMessage:`Loading trashed customer zones...`});return{data:r.data.data,pagination:r.data.pagination}}catch(e){throw console.error(`Error fetching trashed customer zones:`,e),e}}async restoreCustomerZone(e){try{let t=await r(`${this.baseUrl}/${e}/restore`,{},{loadingMessage:`Restoring customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone restored successfully`});return t.data.data}catch(e){throw console.error(`Error restoring customer zone:`,e),e}}async forceDeleteCustomerZone(e){try{await t(`${this.baseUrl}/${e}/force-delete`,{loadingMessage:`Permanently deleting customer zone...`,showSuccessNotification:!0,successMessage:`CustomerZone permanently deleted`})}catch(e){throw console.error(`Error permanently deleting customer zone:`,e),e}}async getCustomerZonesForSelect(){try{let e=await n(`${this.baseUrl}`,{showLoading:!1}),t=e.data.data;return t.filter(e=>e.is_active).map(e=>({value:e.id,label:e.name,disabled:!1}))}catch(e){throw console.error(`Error fetching customer zones for select:`,e),e}}async getCustomerZoneHierarchy(){try{let e=await n(`${this.baseUrl}/hierarchy`,{loadingMessage:`Loading customer zone hierarchy...`});return e.data.data}catch(e){throw console.error(`Error fetching customer zone hierarchy:`,e),e}}buildQueryParams(e){if(!e)return``;let t=new URLSearchParams;return Object.entries(e).forEach(([e,n])=>{n!=null&&n!==``&&t.append(e,String(n))}),t.toString()}};const x=new b,S=o(`customerZones`,()=>{let t=e([]),n=e(null),r=e([]),i=e(c()),a=e(!1),o=e({}),l=s(()=>t.value.filter(e=>e.is_active)),u=s(()=>t.value.filter(e=>!e.is_active)),d=s(()=>l.value.map(e=>({value:e.id,label:e.name,disabled:!1}))),f=async e=>{try{a.value=!0,e&&(o.value={...o.value,...e});let n=await x.getCustomerZones(o.value);t.value=n.data,i.value=n.pagination}catch(e){throw console.error(`Error fetching customer zones:`,e),e}finally{a.value=!1}},p=async e=>{try{let t=await x.getCustomerZone(e);return n.value=t,t}catch(e){throw console.error(`Error fetching customer zone:`,e),e}},m=async e=>{try{let n=await x.createCustomerZone(e);return t.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error creating customer zone:`,e),e}},h=async(e,r)=>{try{let i=await x.updateCustomerZone(e,r),a=t.value.findIndex(t=>t.id===e);return a!==-1&&(t.value[a]=i),n.value?.id===e&&(n.value=i),i}catch(e){throw console.error(`Error updating customer zone:`,e),e}},g=async e=>{try{await x.deleteCustomerZone(e);let r=t.value.findIndex(t=>t.id===e);r!==-1&&t.value.splice(r,1),--i.value.total,n.value?.id===e&&(n.value=null)}catch(e){throw console.error(`Error deleting customer zone:`,e),e}},_=async e=>{try{a.value=!0;let t=e||{},n=await x.getTrashedCustomerZones(t);r.value=n.data}catch(e){throw console.error(`Error fetching trashed customer zones:`,e),e}finally{a.value=!1}},v=async e=>{try{let n=await x.restoreCustomerZone(e),a=r.value.findIndex(t=>t.id===e);return a!==-1&&r.value.splice(a,1),t.value.unshift(n),i.value.total+=1,n}catch(e){throw console.error(`Error restoring customer zone:`,e),e}},y=async e=>{try{await x.forceDeleteCustomerZone(e);let t=r.value.findIndex(t=>t.id===e);t!==-1&&r.value.splice(t,1)}catch(e){throw console.error(`Error permanently deleting customer zone:`,e),e}},b=e=>{o.value={...o.value,...e}},S=()=>{o.value={}},C=()=>{n.value=null},w=()=>{t.value=[],n.value=null,r.value=[],i.value=c(),o.value={},a.value=!1},T=async()=>{try{return await x.getCustomerZonesForSelect()}catch(e){return console.error(`Error fetching customer zones for select:`,e),[]}};return{customerZones:t,currentCustomerZone:n,trashedCustomerZones:r,pagination:i,loading:a,filters:o,activeCustomerZones:l,inactiveCustomerZones:u,customerZonesForSelect:d,fetchCustomerZones:f,fetchCustomerZone:p,createCustomerZone:m,updateCustomerZone:h,deleteCustomerZone:g,fetchTrashedCustomerZones:_,restoreCustomerZone:v,forceDeleteCustomerZone:y,updateFilters:b,clearFilters:S,clearCurrentCustomerZone:C,reset:w,fetchCustomerZonesForSelect:T}});var C=S;export{C as b,S as c,y as d,v as e,h as f,m as g,d as h};